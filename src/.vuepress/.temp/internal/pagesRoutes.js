export const pagesRoutes = [
  ["v-184f4da6","/intro.html",{"d":1577836800000,"l":"2020年1月1日","v":"/assets/images/cover3.jpg","e":"<h2> TODO</h2>\n","r":{"minutes":0.04,"words":13},"y":"a","t":"介绍","i":"circle-info"},[":md"]],
  ["v-8daa1a0e","/",{"y":"h","t":"主页","i":"fa-solid fa-house fa-sm"},["/README.md"]],
  ["v-2e3eac9e","/slides.html",{"d":1577836800000,"l":"2020年1月1日","e":"<!-- markdownlint-disable MD024 MD033 MD051 -->\n","r":{"minutes":4.52,"words":1356},"y":"s","t":"幻灯片页","i":"person-chalkboard"},[":md"]],
  ["v-1d1fa55e","/OS/OS1.html",{"a":"keyhx","d":1656374400000,"l":"2022年6月28日","e":"<h2> 1、操作系统的概念</h2>\n<figure><img src=\"https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/os/36.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<p><strong>操作系统</strong>(Operating System,OS)是指控制和管理整个计算机系统的硬件和软件资源，并合理地组织调度计算机的工作和资源的分配，以提供用户和其他软件方便的接口和环境(从下往上看)，他是计算机系统中最基本的<strong>系统软件</strong>(从上往下看)</p>","r":{"minutes":35.97,"words":10790},"y":"a","t":"操作系统上"},[":md"]],
  ["v-1ed47dfd","/OS/OS2.html",{"a":"keyhx","d":1656374400000,"l":"2022年6月28日","e":"<h2> 1、死锁的概念</h2>\n<ol>\n<li>\n<p>什么是死锁</p>\n<ul>\n<li>在并发环境下，<strong>各进程因竞争资源而造成的一种互相等待对方手里的资源，导致各进程都阻塞，都无法向前推进的现象</strong></li>\n<li><strong>发生死锁至少有两个或两个以上的进程同时发生死锁</strong>，发生死锁后，若无外力干涉，这些进程都无法向前推进，发生死锁的进程一定是在阻塞态</li>\n<li>饥饿的概念：\n<ul>\n<li><strong>由于长期得不到想要的资源，某进程无法向前推进的现象</strong>，比如SPF如果有源源不断的短进程到来，则长进程一直无法获得处理机</li>\n</ul>\n</li>\n<li>死循环的概念\n<ul>\n<li><strong>某进程在执行的过程中一直跳不出某个循环的现象</strong>，有时是因为程序bug导致的，有时是程序员故意为之</li>\n</ul>\n</li>\n<li>死锁、饥饿、死循环的异同\n<ul>\n<li>异如上</li>\n<li>同：都是进程无法顺利向前推进的现象(故意设计的死循环除外)</li>\n</ul>\n</li>\n</ul>\n<figure><img src=\"https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/90.jpg\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n</li>\n<li>\n<p>死锁产生的条件</p>\n<ul>\n<li>\n<p>1、<strong>互斥条件</strong>：只有对必须互斥使用的资源的争抢才会导致死锁</p>\n</li>\n<li>\n<p>2、<strong>不剥夺条件</strong>：进程所获得的资源在未使用完之前，不能由其他进程强行夺走，只能主动释放</p>\n</li>\n<li>\n<p>3、<strong>请求和保持条件</strong>：进程已经至少保持了一个资源，但又提出了新的资源请求，而该资源又被其他进程占有，此时请求进程被阻塞，但又对自己已有的资源保持不放</p>\n</li>\n<li>\n<p>4、<strong>循环等待条件</strong>：存在一种进程资源的循环等待链，链中的每一个进程已获得的资源同时被下一个进程所请求</p>\n</li>\n<li>\n<p>注意：发生死锁的时候一定有循环等待，但是发生循环等待的时候未必死锁，因为如果同类资源的数量大于1，当该类资源又进程释放的时候，死锁结束。如果每类资源只有1个，那就是充分必要条件了</p>\n</li>\n</ul>\n</li>\n<li>\n<p>什么时候会发生死锁</p>\n<ul>\n<li>1、<strong>对系统资源的竞争</strong>。对不可剥夺资源的竞争可能会引起死锁，对可剥夺的资源不会产生</li>\n<li>2、<strong>进程推进顺序非法</strong>。请求和释放资源的顺序不当，比如，并发执行的进程P1、P2分别申请并占有了资源R1,R2,但是之后P1进程又申请资源R2，P2进程申请资源R1，这样会导致死锁</li>\n<li>3、<strong>信号量的使用不当</strong>。比如，实现互斥的P操作在实现同步的P操作之前</li>\n</ul>\n</li>\n<li>\n<p>死锁的处理策略</p>\n<ul>\n<li>1、<strong>预防死锁</strong>：破坏死锁产生的四个必要条件中的一个或几个</li>\n<li>2、<strong>避免死锁</strong>：用某种方法阻止系统进入不安全的状态</li>\n<li>3、<strong>死锁的检测和解除</strong>：允许死锁的产生，不过操作系统会负责检测出死锁的产生，然后采取某种措施解除死锁</li>\n</ul>\n</li>\n</ol>","r":{"minutes":36.18,"words":10853},"y":"a","t":"操作系统中"},[":md"]],
  ["v-2089569c","/OS/OS3.html",{"a":"keyhx","d":1656374400000,"l":"2022年6月28日","e":"<h2> 1、初识文件管理</h2>\n<ol>\n<li>\n<p>文件内部的数据组织形式</p>\n<figure><img src=\"https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/img/image-20220521220755154.png\" alt=\"image-20220521220755154\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20220521220755154</figcaption></figure>\n</li>\n<li>\n<p>文件组织形式</p>\n<figure><img src=\"https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/img/image-20220521220941143.png\" alt=\"image-20220521220941143\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20220521220941143</figcaption></figure>\n</li>\n<li>\n<p>操作系统向上提供的功能</p>\n<figure><img src=\"https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/img/image-20220521221245106.png\" alt=\"image-20220521221245106\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20220521221245106</figcaption></figure>\n<p>可以使用几个基本操作完成更加复杂的操作，比如：复制文件：先创建一个新的空文件夹，再把源文件读入内存，再将内存中的数据写入到新文件中</p>\n</li>\n<li>\n<p>文件如何存放在外存？</p>\n<figure><img src=\"https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/img/image-20220521221810990.png\" alt=\"image-20220521221810990\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20220521221810990</figcaption></figure>\n</li>\n<li>\n<p>其他需要操作系统实现的文件管理功能</p>\n<p>文件共享：使多个用户可以共享使用一个文件</p>\n<p>文件保护：如何保证不同的用户对文件由不同的操作权限</p>\n</li>\n</ol>","r":{"minutes":21.97,"words":6590},"y":"a","t":"操作系统下"},[":md"]],
  ["v-dde31c18","/ml/CycleGAN.html",{"d":1653609600000,"l":"2022年5月27日","e":"<h2> 附录</h2>\n<p>Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks</p>\n<p>ICCV 2017</p>\n<p><strong>论文主页</strong>：<a href=\"https://junyanz.github.io/CycleGAN/\" target=\"_blank\" rel=\"noopener noreferrer\">https://junyanz.github.io/CycleGAN/</a></p>\n<p><strong>原始论文</strong>：<a href=\"https://arxiv.org/pdf/1703.10593.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">https://arxiv.org/pdf/1703.10593.pdf</a></p>","r":{"minutes":1.03,"words":309},"y":"a","t":"CycleGAN"},[":md"]],
  ["v-b548c708","/ml/GAN.html",{"d":1652832000000,"l":"2022年5月18日","e":"<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>D</mi><mi>G</mi><mo lspace=\"0em\" rspace=\"0em\">∗</mo></msubsup><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold-italic\">x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><msub><mi>p</mi><mtext>data&nbsp;</mtext></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold-italic\">x</mi><mo stretchy=\"false\">)</mo></mrow><mrow><msub><mi>p</mi><mtext>data&nbsp;</mtext></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold-italic\">x</mi><mo stretchy=\"false\">)</mo><mo>+</mo><msub><mi>p</mi><mi>g</mi></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold-italic\">x</mi><mo stretchy=\"false\">)</mo></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">D_{G}^{*}(\\boldsymbol{x})=\\frac{p_{\\text {data }}(\\boldsymbol{x})}{p_{\\text {data }}(\\boldsymbol{x})+p_{g}(\\boldsymbol{x})}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0253em;vertical-align:-0.2753em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-2.4247em;margin-left:-0.0278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">G</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∗</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2753em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord boldsymbol\">x</span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.5523em;vertical-align:-0.5423em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3488em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">data&nbsp;</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1512em;\"><span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord boldsymbol mtight\">x</span></span></span><span class=\"mclose mtight\">)</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1645em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">g</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2819em;\"><span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord boldsymbol mtight\">x</span></span></span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3488em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">data&nbsp;</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1512em;\"><span></span></span></span></span></span></span><span class=\"mopen mtight\">(</span><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord boldsymbol mtight\">x</span></span></span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5423em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></p>","r":{"minutes":1.65,"words":494},"y":"a","t":"GAN"},[":md"]],
  ["v-0a003464","/ml/pix2pix.html",{"a":"Vingkin","d":1653609600000,"l":"2022年5月27日","e":"<h2> 附录</h2>\n<p>图像转译和生成对抗网络GAN必读论文 pix2pix</p>\n<p>Image-to-Image Translation with Conditional Adversarial Nets</p>\n<p>CVPR 2017</p>\n<p>使用条件式生成对抗网络，提出图像转译的通用框架。生成器采用U-Net网络结构，融合底层细粒度特征和高层抽象语义特征。判别器采用patchGAN网络结构，在图块尺度提取纹理等高频信息。</p>\n<p>pix2pix在语义标签图转真实照片、简笔画转真图、黑白图像上色、卫星航拍图转地图等图像转译任务上表现优秀。</p>\n<h3> 主页</h3>","r":{"minutes":0.84,"words":252},"y":"a","t":"CycleGAN"},[":md"]],
  ["v-61b2520c","/ml/YOLOv3.html",{"d":1652745600000,"l":"2022年5月17日","e":"<img src=\"https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/深度学习/sayit.jpg\" style=\"zoom: 200%;\">\n<blockquote>\n<p>整理自同济子豪兄</p>\n</blockquote>\n<h2> 网络结构</h2>\n<figure><img src=\"https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/深度学习/image-20220518135951221.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>","r":{"minutes":2.93,"words":878},"y":"a","t":"YOLOv3"},[":md"]],
  ["v-2f366b20","/ml/%E8%AF%BB%E5%89%8D%E9%A1%BB%E7%9F%A5.html",{"d":1658016000000,"l":"2022年7月17日","e":"<h3> 1</h3>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munder><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mi>x</mi><mo>→</mo><mi mathvariant=\"normal\">∞</mi></mrow></munder><msubsup><mi>x</mi><mn>22</mn><mn>2</mn></msubsup><mo>−</mo><msubsup><mo>∫</mo><mn>1</mn><mn>5</mn></msubsup><mi>x</mi><mi mathvariant=\"normal\">d</mi><mi>x</mi><mo>+</mo><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mn>20</mn></munderover><msup><mi>n</mi><mn>2</mn></msup><mo>=</mo><munderover><mo>∏</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mn>3</mn></munderover><msub><mi>y</mi><mi>j</mi></msub><mo>+</mo><munder><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mi>x</mi><mo>→</mo><mo>−</mo><mn>2</mn></mrow></munder><mfrac><mrow><mi>x</mi><mo>−</mo><mn>2</mn></mrow><mi>x</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">\n\\lim_{x \\to \\infty} x^2_{22} - \\int_{1}^{5}x\\mathrm{d}x + \\sum_{n=1}^{20} n^{2} = \\prod_{j=1}^{3} y_{j} + \\lim_{x \\to\n-2} \\frac{x-2}{x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.5641em;vertical-align:-0.7em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6944em;\"><span style=\"top:-2.4em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mrel mtight\">→</span><span class=\"mord mtight\">∞</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">lim</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-2.453em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">22</span></span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.476em;vertical-align:-0.9119em;\"></span><span class=\"mop\"><span class=\"mop op-symbol large-op\" style=\"margin-right:0.44445em;position:relative;top:-0.0011em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.564em;\"><span style=\"top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.8129em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9119em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathrm\">d</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.0682em;vertical-align:-1.2671em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8011em;\"><span style=\"top:-1.8829em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">20</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2671em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.2149em;vertical-align:-1.4138em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8011em;\"><span style=\"top:-1.8723em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.05em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∏</span></span></span><span style=\"top:-4.3em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4138em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0969em;vertical-align:-0.7754em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6944em;\"><span style=\"top:-2.3829em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mrel mtight\">→</span><span class=\"mord mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">lim</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7754em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3214em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>","r":{"minutes":1.34,"words":403},"y":"a","t":"读前须知"},["/ml/读前须知.html","/ml/读前须知.md",":md"]],
  ["v-127111b8","/tools/AI.html",{"d":1696347862000,"e":"<div class=\"vp-card-container\">\n</div>\n","r":{"minutes":0.79,"words":237},"y":"a","t":"AI","i":"fa-solid fa-user-astronaut"},[":md"]],
  ["v-6f53fa1c","/tools/books.html",{"d":1696091610000,"e":"<div class=\"vp-card-container\">\n</div>\n","r":{"minutes":1.86,"words":557},"y":"a","t":"书籍","i":"fa-solid fa-book fa-sm"},[":md"]],
  ["v-c9bbd27a","/tools/Windows.html",{"d":1696347862000,"e":"<div class=\"vp-card-container\">\n</div>\n","r":{"minutes":0.45,"words":134},"y":"a","t":"Windows 工具","i":"fa-brands fa-microsoft"},[":md"]],
  ["v-8ff06b78","/interview/bigdata/high_frequency_words.html",{"a":"Vingkin","d":1655164800000,"l":"2022年6月14日","e":"<blockquote>\n<p><a href=\"https://mp.weixin.qq.com/s/e2kFn99DSXjQ7fCxjxlSYw\" target=\"_blank\" rel=\"noopener noreferrer\">如何从海量数据中找出高频词？</a></p>\n</blockquote>\n<h2> 题目描述</h2>\n<p>假如有一个<strong>1G</strong>大小的文件，文件里每一行是一个词，每个词的大小不超过<strong>16byte</strong>，要求返回出现频率最高的100个词。内存大小限制是<strong>10M</strong></p>\n<h2> 解法1（存在问题）</h2>","r":{"minutes":4.02,"words":1205},"y":"a","t":"如何从海量数据中找出高频词？"},[":md"]],
  ["v-f66aca42","/designmode/Adapter.html",{"a":"Vingkin","d":1691539200000,"l":"2023年8月9日","e":"<blockquote>\n<p><a href=\"https://mp.weixin.qq.com/s/1w_epimqLBOiZdIhe6sUsw\" target=\"_blank\" rel=\"noopener noreferrer\">程序媛教你一看就懂的适配器设计模式！</a></p>\n</blockquote>\n<h2> 概述</h2>\n<p>如果去欧洲国家去旅游的话，他们的插座如下图最左边，是欧洲标准。而我们使用的插头如下图最右边的。因此我们的笔记本电脑，手机在当地不能直接充电。所以就需要一个插座转换器，转换器第1面插入当地的插座，第2面供我们充电，这样使得我们的插头在当地能使用。生活中这样的例子很多，手机充电器（将220v转换为5v的电压），读卡器等，其实就是使用到了适配器模式。</p>","r":{"minutes":5.82,"words":1745},"y":"a","t":"适配器模式"},[":md"]],
  ["v-42d31e13","/designmode/Builder.html",{"a":"Vingkin","d":1655856000000,"l":"2022年6月22日","e":"<h2> 概述</h2>\n<p>将一个复杂对象的构建与表示分离，使得同样的构建过程可以创建不同的表示。</p>\n<img src=\"https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/interview/image-20200413225341516.png\" style=\"zoom:60%;\">\n<ul>\n<li>分离了部件的<strong>构造</strong>(由Builder来负责)和<strong>装配</strong>(由Director负责)。 从而可以构造出复杂的对象。这个模式适用于：某个对象的构建过程复杂的情况。</li>\n<li>由于实现了构建和装配的解耦。不同的构建器，相同的装配，也可以做出不同的对象；相同的构建器，不同的装配顺序也可以做出不同的对象。也就是实现了构建算法、装配算法的解耦，实现了更好的复用。</li>\n<li>建造者模式可以将部件和其组装过程分开，一步一步创建一个复杂的对象。用户只需要指定复杂对象的类型就可以得到该对象，而无须知道其内部的具体构造细节。</li>\n</ul>","r":{"minutes":7.91,"words":2374},"y":"a","t":"建造者模式"},[":md"]],
  ["v-c683763a","/designmode/DesignMode.html",{"a":"Vingkin","d":1650758400000,"l":"2022年4月24日","e":"<h2> 单例模式</h2>\n<blockquote>\n<p><a href=\"https://hefeijoe.github.io/post/singeleton/\" target=\"_blank\" rel=\"noopener noreferrer\">单例模式的应用场景 | HefeiJoe Blog</a></p>\n</blockquote>\n<p><strong>懒汉式线程不安全</strong></p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton1</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton1</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.83,"words":550},"y":"a","t":"设计模式"},[":md"]],
  ["v-4b132bf8","/designmode/Factory.html",{"a":"Vingkin","d":1655769600000,"l":"2022年6月21日","e":"<h2> 概述</h2>\n<p>需求：设计一个咖啡店点餐系统。</p>\n<p>设计一个咖啡类（Coffee），并定义其两个子类（美式咖啡【AmericanCoffee】和拿铁咖啡【LatteCoffee】）；再设计一个咖啡店类（CoffeeStore），咖啡店具有点咖啡的功能。</p>\n<p>具体类的设计如下：</p>\n<img src=\"https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/interview/工厂设计模式引入.png\" style=\"zoom:80%;\">\n<p>在java中，万物皆对象，这些对象都需要创建，如果创建的时候直接new该对象，就会对该对象耦合严重，假如我们要更换对象，所有new对象的地方都需要修改一遍，这显然违背了软件设计的开闭原则。如果我们使用工厂来生产对象，我们就只和工厂打交道就可以了，彻底和对象解耦，如果要更换对象，直接在工厂里更换该对象即可，达到了与对象解耦的目的；所以说，工厂模式最大的优点就是：<strong>解耦</strong>。</p>","r":{"minutes":10.81,"words":3242},"y":"a","t":"工厂模式"},[":md"]],
  ["v-f06d0324","/designmode/Observer.html",{"a":"Vingkin","d":1691539200000,"l":"2023年8月9日","e":"<blockquote>\n<p>可见《图解设计模式》Observer模式篇</p>\n</blockquote>\n<h2> 概述</h2>\n<p>在Observer模式中，当观察对象的状态发生变化时，会通知给观察者。Observer模式适用于根据对象状态进行相应处理的场景。Observer本来的意思是“观察者”，但实际上Observer角色并非主动地去观察，而是被动地接受来自Subject角色的通知。因此，Observer模式也被称为<strong>Publish-Subscribe（发布-订阅）</strong> 模式。</p>\n<h2> 结构</h2>\n<img src=\"https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/微信截图_20230810094722.png\" style=\"zoom:50%;\">","r":{"minutes":2.08,"words":623},"y":"a","t":"观察者模式 / 发布-订阅模式 / 生产-消费模式"},[":md"]],
  ["v-41c3c8a8","/designmode/Prototype.html",{"a":"Vingkin","d":1655769600000,"l":"2022年6月21日","e":"<h2> 概述</h2>\n<p>用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型对象相同的新对象。</p>\n<h2> 结构</h2>\n<p>原型模式包含如下角色：</p>\n<ul>\n<li>抽象原型类：规定了具体原型对象必须实现的的 clone() 方法。</li>\n<li>具体原型类：实现抽象原型类的 clone() 方法，它是可被复制的对象。</li>\n<li>访问类：使用具体原型类中的 clone() 方法来复制新的对象。</li>\n</ul>\n<p>接口类图如下：</p>\n<figure><img src=\"https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/interview/原型模式.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>","r":{"minutes":4.07,"words":1222},"y":"a","t":"原型模式"},[":md"]],
  ["v-3b988860","/designmode/Proxy.html",{"a":"Vingkin","d":1693440000000,"l":"2023年8月31日","e":"<h2> 概述</h2>\n<p>由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介。</p>\n<p>Java中的代理按照代理类生成时机不同又分为<strong>静态代理</strong>和<strong>动态代理</strong>。静态代理代理类在编译期就生成，而动态代理代理类则是在Java运行时动态生成。动态代理又有JDK代理和CGLib代理两种。</p>\n<h2> 结构</h2>\n<p>代理（Proxy）模式分为三种角色：</p>\n<ul>\n<li>抽象主题（Subject）类： 通过接口或抽象类声明真实主题和代理对象实现的业务方法。</li>\n<li>真实主题（Real Subject）类： 实现了抽象主题中的具体业务，是代理对象所代表的真实对象，是最终要引用的对象。</li>\n<li>代理（Proxy）类 ： 提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访问、控制或扩展真实主题的功能。</li>\n</ul>","r":{"minutes":9.22,"words":2766},"y":"a","t":"代理模式"},[":md"]],
  ["v-5e039b3a","/designmode/Singleton.html",{"a":"Vingkin","d":1655683200000,"l":"2022年6月20日","e":"<blockquote>\n<p><a href=\"https://www.jb51.net/article/213888.htm\" target=\"_blank\" rel=\"noopener noreferrer\">为什么要使用单例模式详解</a></p>\n</blockquote>\n<p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>\n<p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>","r":{"minutes":10.67,"words":3200},"y":"a","t":"单例模式"},[":md"]],
  ["v-75236f30","/designmode/SoftwareDesignPrinciples.html",{"a":"Vingkin","d":1655683200000,"l":"2022年6月20日","e":"<p>在软件开发中，为了提高软件系统的可维护性和可复用性，增加软件的可扩展性和灵活性，程序员要尽量根据6条原则来开发程序，从而提高软件开发效率、节约软件开发成本和维护成本。</p>\n<h3> 开闭原则</h3>\n<p><strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。</p>\n<p>想要达到这样的效果，我们需要使用接口和抽象类。</p>\n<p>因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。</p>","r":{"minutes":10.43,"words":3129},"y":"a","t":"软件设计原则"},[":md"]],
  ["v-1e9c07f1","/designmode/Strategy.html",{"a":"Vingkin","d":1692057600000,"l":"2023年8月15日","e":"<blockquote>\n<p>可见《图解设计模式》Strategy模式篇</p>\n</blockquote>\n<h2> 概述</h2>\n<p>使用Strategy模式可以整体地替换算法的实现部分。能够整体地替换算法，能让我们轻松地以不同的算法去解决同一个问题，这种模式就是Strategy模式。</p>\n<p>通常在编程时算法会被写在具体的方法中。Strategy模式却特意将算法与其他部分分离开，只是定义了与算法相关的接口（API），然后再程序中以委托的方式来使用算法。**使用委托这种弱关联关系可以很方便地整体替换算法。**例如使用Strategy模式编写象棋程序时，可以方便地根据棋手的选择切换AI例程的水平。</p>","r":{"minutes":3.22,"words":966},"y":"a","t":"策略模式"},[":md"]],
  ["v-4d746b4a","/designmode/Template.html",{"a":"Vingkin","d":1656374400000,"l":"2022年6月28日","e":"<h2> 概述</h2>\n<p>在面向对象程序设计过程中，程序员常常会遇到这种情况：设计一个系统时知道了算法所需的关键步骤，而且确定了这些步骤的执行顺序，但某些步骤的具体实现还未知，或者说某些步骤的实现与具体的环境相关。</p>\n<p>例如，去银行办理业务一般要经过以下4个流程：取号、排队、办理具体业务、对银行工作人员进行评分等，其中取号、排队和对银行工作人员进行评分的业务对每个客户是一样的，可以在父类中实现，但是办理具体业务却因人而异，它可能是存款、取款或者转账等，可以延迟到子类中实现。</p>\n<p><strong>定义：</strong></p>\n<p>定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</p>","r":{"minutes":5.13,"words":1540},"y":"a","t":"模板方法模式"},[":md"]],
  ["v-ef155d36","/interview/computer/CodeTemplate.html",{"a":"Vingkin","d":1650758400000,"l":"2022年4月24日","e":"<h2> 排序</h2>\n<figure><img src=\"https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/深度学习/d643d1cbaefa4244bf733659a6122918.png\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>\n<h3> 选择排序</h3>\n<ol>\n<li>找到最大（小）的元素</li>\n<li>将其与最后一个元素进行交换</li>\n<li>重复</li>\n</ol>\n<h3> 插入排序</h3>","r":{"minutes":3.96,"words":1188},"y":"a","t":"代码模板"},[":md"]],
  ["v-eafd00da","/interview/computer/ComputerNetwork.html",{"a":"Vingkin","d":1651017600000,"l":"2022年4月27日","c":"interview","g":"interview","e":"<h2> Get和Post的区别</h2>\n<blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000023940344\" target=\"_blank\" rel=\"noopener noreferrer\">【网络协议】彻底弄清POST和GET请求的区别，这次你GET了么 - SegmentFault 思否</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000040463262\" target=\"_blank\" rel=\"noopener noreferrer\">【前端 · 面试 】HTTP 总结（五）—— GET 和 POST - SegmentFault 思否</a></p>\n</blockquote>","r":{"minutes":0.44,"words":132},"y":"a","t":"计算机网络"},[":md"]],
  ["v-d2bd2386","/interview/computer/DataStructure.html",{"a":"Vingkin","d":1650758400000,"l":"2022年4月24日","e":"<h2> 红黑树</h2>\n<ol>\n<li>节点是红色或黑色</li>\n<li>根节点是黑色</li>\n<li>每个叶子节点都是黑色的空节点（NIL节点）</li>\n<li>每个红色节点的两个子节点都是黑色。（从每个叶子到根的所有路径上不能有两个连续的红节点）</li>\n<li>从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。</li>\n</ol>\n<figure><img src=\"https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/interview/1602b6016e143cf3tplv-t2oaga2asx-zoom-in-crop-mark1304000.awebp\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>","r":{"minutes":22.75,"words":6826},"y":"a","t":"数据结构"},[":md"]],
  ["v-8d0611f0","/interview/computer/OS.html",{"a":"Vingkin","d":1650758400000,"l":"2022年4月24日","e":"<h2> 操作系统IO介绍</h2>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/6971291445147729950\" target=\"_blank\" rel=\"noopener noreferrer\">再过60分钟你就能了解同步异步、阻塞非阻塞、IO多路复用、select、poll、epoll等概念啦</a></p>\n</blockquote>\n<h3> 用户空间和内核空间（用户态和内核态）</h3>\n<p>现在的操作系统都是采用虚拟存储器，对于32位操作系统而言，他的寻址空间（虚拟存储空间）为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn><mi>G</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mn>32</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">4G(2^{32})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\">G</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">32</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>。操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也有访问底层硬件设备的所有权限。为了保证用户进程不能直接操作系统内核（kernel），保证内核的安全，操作系统将虚拟空间划分成两部分，一部分为内核空间，一部分为用户空间。针对linux操作系统而言，将最高的1G字节供内核使用，成为内核空间，而将较低的3G字节供各个进程使用，称为用户空间。</p>","r":{"minutes":29.64,"words":8892},"y":"a","t":"操作系统"},[":md"]],
  ["v-caef7fe4","/interview/database/DatabaseGuidelines.html",{"a":"Vingkin","d":1691971200000,"l":"2023年8月14日","e":"<blockquote>\n<p>本文摘录自<a href=\"https://www.bookstack.cn/read/alibaba-java/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93.md\" target=\"_blank\" rel=\"noopener noreferrer\">阿里巴巴Java开发手册MySQL数据库篇</a>，目的是为了加强记忆方便查询</p>\n</blockquote>\n<h2> 建表规约</h2>\n<div class=\"hint-container danger\">\n<p class=\"hint-container-title\">【强制】</p>\n<ol>\n<li>表达是否概念的字段，必须使用<code>is_xxx</code>的方式命名，数据类型是<code>unsigned tinyint</code>（1表示是，0表示否）。</li>\n</ol>\n<p><span style=\"color: orange\">说明</span>：任何字段如果为非负数，必须是<code>unsigned</code>。</p>\n<p><span style=\"color: green\">正例</span>：表达逻辑删除的字段名<code>is_deleted</code>，1表示删除，0表示未删除。</p>\n</div>","r":{"minutes":12.76,"words":3827},"y":"a","t":"数据库开发规范"},[":md"]],
  ["v-c682b678","/interview/database/Mysql.html",{"a":"Vingkin","d":1650758400000,"l":"2022年4月24日","e":"<h2> 说说对MySQL索引的理解</h2>\n<p>索引是在存储引擎中实现的，因此，每种存储引擎的索引都不一定完全相同，并且每种存储引擎也不一定支持所有的索引类型。MySQL中索引的存储类型有两种，即<code>BTREE</code>和<code>HASH</code>，具体和表的存储引擎相关。<code>MyISAM</code>和<code>InnoDB</code>的存储引擎只支持<code>BTREE</code>索引，<code>MEMORY</code>存储引擎支持<code>HASH</code>和<code>BTREE</code>索引。</p>\n<p><strong>优点：</strong></p>","r":{"minutes":23.64,"words":7093},"y":"a","t":"MySQL"},[":md"]],
  ["v-1b639f8b","/interview/database/Redis.html",{"a":"Vingkin","d":1650758400000,"l":"2022年4月24日","e":"<h2> Redis常见数据结构以及使用场景</h2>\n<p><strong>string</strong></p>\n<p>介绍：虽然Reids是C语言编写的，但是其string底层并没有采用C的字符串，而是自己构建了一种简单动态字符串</p>\n<p>常用命令：<code>set，get，strlen，exists，decr，incr，setex</code>等</p>\n<p>应用场景：一般用于需要计数的场景，比如用户的访问次数，热点文章的点赞数和转发数等等</p>\n<p><strong>list</strong></p>\n<p>介绍：底层为双向链表</p>\n<p>常用命令：<code>rpush，lpush，rpop，lpop，lrange，llen</code>等</p>","r":{"minutes":10.38,"words":3114},"y":"a","t":"Redis"},[":md"]],
  ["v-21d65c9c","/interview/java/concurrent.html",{"a":"Vingkin","d":1650758400000,"l":"2022年4月24日","e":"<h2> start()和run()</h2>\n<ol>\n<li>start()和run()都是Thread类的方法（如果用的是Runnable则执行的是Runnable中的run方法，注意Callable中的是call方法）</li>\n<li>start是启动线程作用是将线程变为就绪状态，至于是否调用还是得看CPU的分配。run是一个线程的具体执行内容，线程启动后自动调用。</li>\n<li>如果在main线程中调用了t1线程的run方法，就相当于main线程运行了一个普通的run方法，并没能达到多线程的效果</li>\n<li>strat只能调用一次，多次调用会抛<code>IllegalThreadStateException</code>异常</li>\n</ol>","r":{"minutes":41.96,"words":12587},"y":"a","t":"Java并发"},[":md"]],
  ["v-79599e71","/interview/java/Java.html",{"a":"Vingkin","d":1650758400000,"l":"2022年4月24日","e":"<h2> 接口和抽象类有什么共同点和区别</h2>\n<p>共同点：</p>\n<ul>\n<li>都不能被实例化</li>\n<li>都可以包含抽象方法</li>\n<li>都可以有默认的实现方法（Java 8可以用default关键字在接口中定义默认方法）</li>\n</ul>\n<p>区别：</p>\n<ul>\n<li>接口主要用于对类的行为进行约束，实现了某个接口就有了相应的行为。抽象类主要用于代码复用，强调的是所属关系</li>\n<li>一个类只能继承一个抽象类，但是能实现多个接口</li>\n<li>接口中的成员变量只能是public static final类型的，不能被修改且必须有初始值，而抽象类的成员变量默认default，可在子类中被重新定义，也可被重新赋值。</li>\n</ul>","r":{"minutes":11.82,"words":3547},"y":"a","t":"Java基础"},[":md"]],
  ["v-e7963868","/interview/java/JDK8.html",{"a":"Vingkin","d":1691452800000,"l":"2023年8月8日","e":"<h2> Lambda</h2>\n<p>lambda针对函数式接口进行简化编程，相对还算比较容易。</p>\n<p>在排序方面比较常用，示例如下：</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>employees<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">,</span> e2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> e2<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> e2<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e2<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.31,"words":992},"y":"a","t":"JDK8新特性"},[":md"]],
  ["v-6d18ab1e","/interview/java/JVM.html",{"a":"Vingkin","d":1650758400000,"l":"2022年4月24日","e":"<h2> 双亲委派机制</h2>\n<p><strong>工作原理</strong></p>\n<ol>\n<li>如果一个类加载器收到了类加载的请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行</li>\n<li>如果父类加载器还存在父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器</li>\n<li>如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派机制</li>\n</ol>\n<p><strong>优点</strong></p>\n<ol>\n<li>避免类的重复加载</li>\n<li>保护程序安全，防止核心API被随意篡改（比如：java.lang.String)</li>\n</ol>","r":{"minutes":12.96,"words":3889},"y":"a","t":"JVM"},[":md"]],
  ["v-1c913b6f","/microservice/reactive/ReactiveStream.html",{"a":"Vingkin","d":1691625600000,"l":"2023年8月10日","e":"<h2> 概念</h2>\n<p><code>Reactive Streams</code>为我们提供了Java中的Reactive Programming的通用API。传统异步编程的写法，不同任务分别在不同的线程中执行，协调这些线程执行的先后顺序、线程间的依赖顺序是一件非常麻烦的事情，而<code>Reactive Streams</code>就是为了解决该问题。<code>Reactive Streams API</code>中仅仅包含了如下<strong>四个接口：</strong></p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">//发布者</span>\n<span class=\"token keyword\">public</span>  <span class=\"token keyword\">interface</span>  <span class=\"token class-name\">Publisher</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span>  <span class=\"token keyword\">void</span>  subscribe（<span class=\"token class-name\">Subscriber</span> <span class=\"token operator\">&lt;</span>？<span class=\"token keyword\">super</span>  <span class=\"token class-name\">T</span> <span class=\"token operator\">&gt;</span>  s）<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//订阅者</span>\n<span class=\"token keyword\">public</span>  <span class=\"token keyword\">interface</span>  <span class=\"token class-name\">Subscriber</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span>  <span class=\"token keyword\">void</span>  onSubscribe（<span class=\"token class-name\">Subscription</span>  s）<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span>  <span class=\"token keyword\">void</span>  onNext（<span class=\"token class-name\">T</span>  t）<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span>  <span class=\"token keyword\">void</span>  onError（<span class=\"token class-name\">Throwable</span>  t）<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span>  <span class=\"token keyword\">void</span>  onComplete（）<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//表示Subscriber消费Publisher发布的一个消息的生命周期</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Subscription</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//处理器，表示一个处理阶段，它既是订阅者也是发布者，并且遵守两者的契约</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Processor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Subscriber</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Publisher</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n\t\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":4.33,"words":1300},"y":"a","t":"响应式流"},[":md"]],
  ["v-69732fad","/microservice/reactive/webflux.html",{"a":"Vingkin","d":1691625600000,"l":"2023年8月10日","e":"<h2> TODO</h2>\n","r":{"minutes":0.03,"words":9},"y":"a","t":"webflux"},[":md"]],
  ["v-494a56f8","/netty/advance/bag.html",{"a":"vingkin","d":1658880000000,"l":"2022年7月27日","e":"<h2> 粘包现象</h2>\n<p>服务端代码</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorldServer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> log <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HelloWorldServer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">NioEventLoopGroup</span> boss <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NioEventLoopGroup</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">NioEventLoopGroup</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NioEventLoopGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">ServerBootstrap</span> serverBootstrap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerBootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            serverBootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NioServerSocketChannel</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            serverBootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span>boss<span class=\"token punctuation\">,</span> worker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            serverBootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">childHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelInitializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SocketChannel</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token annotation punctuation\">@Override</span>\n                <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initChannel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SocketChannel</span> ch<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n                    ch<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LoggingHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LogLevel</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEBUG</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    ch<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelInboundHandlerAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token annotation punctuation\">@Override</span>\n                        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">channelActive</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n                            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connected {}\"</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">channelActive</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n\n                        <span class=\"token annotation punctuation\">@Override</span>\n                        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">channelInactive</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n                            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"disconnect {}\"</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">channelInactive</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">ChannelFuture</span> channelFuture <span class=\"token operator\">=</span> serverBootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{} binding...\"</span><span class=\"token punctuation\">,</span> channelFuture<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            channelFuture<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{} bound...\"</span><span class=\"token punctuation\">,</span> channelFuture<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            channelFuture<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">closeFuture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"server error\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            boss<span class=\"token punctuation\">.</span><span class=\"token function\">shutdownGracefully</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            worker<span class=\"token punctuation\">.</span><span class=\"token function\">shutdownGracefully</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stoped\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">HelloWorldServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":17.06,"words":5118},"y":"a","t":"粘包与半包"},[":md"]],
  ["v-7621adb3","/netty/advance/chatroom.html",{"a":"vingkin","d":1658880000000,"l":"2022年7月27日","e":"<h2> 聊天室业务介绍</h2>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token doc-comment comment\">/**\n * 用户管理接口\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * 登录\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">username</span> 用户名\n     * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">password</span> 密码\n     * <span class=\"token keyword\">@return</span> 登录成功返回 true, 否则返回 false\n     */</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":6.76,"words":2027},"y":"a","t":"聊天室案例"},[":md"]],
  ["v-672afe6e","/netty/advance/protocol.html",{"a":"vingkin","d":1658880000000,"l":"2022年7月27日","e":"<h2> 为什么需要协议？</h2>\n<p>TCP/IP 中消息传输基于流的方式，没有边界。</p>\n<p>协议的目的就是划定消息的边界，制定通信双方要共同遵守的通信规则</p>\n<p>例如：在网络上传输</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>下雨天留客天留我不留\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","r":{"minutes":5.67,"words":1702},"y":"a","t":"协议设计与解析"},[":md"]],
  ["v-54862980","/netty/basics/component.html",{"a":"vingkin","d":1658707200000,"l":"2022年7月25日","e":"<h2> EventLoop</h2>\n<p>事件循环对象</p>\n<p>EventLoop 本质是一个单线程执行器（同时维护了一个 Selector），里面有 run 方法处理 Channel 上源源不断的 io 事件。</p>\n<p>它的继承关系比较复杂</p>\n<ul>\n<li>一条线是继承自 j.u.c.ScheduledExecutorService 因此包含了线程池中所有的方法</li>\n<li>另一条线是继承自 netty 自己的 OrderedEventExecutor，\n<ul>\n<li>提供了 boolean inEventLoop(Thread thread) 方法判断一个线程是否属于此 EventLoop</li>\n<li>提供了 parent 方法来看看自己属于哪个 EventLoopGroup</li>\n</ul>\n</li>\n</ul>","r":{"minutes":27.51,"words":8252},"y":"a","t":"组件"},[":md"]],
  ["v-75b94215","/netty/basics/helloworld.html",{"a":"vingkin","d":1658448000000,"l":"2022年7月22日","e":"<h2> 目标</h2>\n<p>开发一个简单的服务器端和客户端</p>\n<ul>\n<li>客户端向服务器端发送 hello, world</li>\n<li>服务器仅接收，不返回</li>\n</ul>\n<p>加入依赖</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><pre class=\"language-xml\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>io.netty<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>netty-all<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>4.1.39.Final<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.84,"words":851},"y":"a","t":"Hello World"},[":md"]],
  ["v-2f1bb992","/netty/basics/summary.html",{"a":"vingkin","d":1658448000000,"l":"2022年7月22日","e":"<h2> Netty 是什么？</h2>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>Netty is an asynchronous event-driven network application framework\nfor rapid development of maintainable high performance protocol servers &amp; clients.\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.25,"words":376},"y":"a","t":"Netty概述"},[":md"]],
  ["v-079c0eac","/netty/basics/two_way_communication.html",{"a":"vingkin","d":1658793600000,"l":"2022年7月26日","e":"<h2> 练习</h2>\n<p>实现一个 echo server</p>\n<p>编写 server</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerBootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">NioEventLoopGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NioServerSocketChannel</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">childHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelInitializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NioSocketChannel</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initChannel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NioSocketChannel</span> ch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            ch<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelInboundHandlerAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token annotation punctuation\">@Override</span>\n                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">channelRead</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">ByteBuf</span> buffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ByteBuf</span><span class=\"token punctuation\">)</span> msg<span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Charset</span><span class=\"token punctuation\">.</span><span class=\"token function\">defaultCharset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// 建议使用 ctx.alloc() 创建 ByteBuf</span>\n                    <span class=\"token class-name\">ByteBuf</span> response <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    response<span class=\"token punctuation\">.</span><span class=\"token function\">writeBytes</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">writeAndFlush</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// 思考：需要释放 buffer 吗</span>\n                    <span class=\"token comment\">// 思考：需要释放 response 吗</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.67,"words":500},"y":"a","t":"双向通信"},[":md"]],
  ["v-f5762fde","/interview/distributed/idgenerator/SnowFlake.html",{"a":"Vingkin","d":1654387200000,"l":"2022年6月5日","e":"<blockquote>\n<p><a href=\"https://bbs.huaweicloud.com/blogs/344958\" target=\"_blank\" rel=\"noopener noreferrer\">SnowFlake 雪花算法详解与实现</a></p>\n</blockquote>\n<h2> 背景</h2>\n<p>现在的服务基本是分布式，微服务形式的，而且大数据量也导致分库分表的产生，对于水平分表就需要保证表中 id 的全局唯一性。</p>\n<p>对于 MySQL 而言，一个表中的主键 id 一般使用自增的方式，但是如果进行水平分表之后，多个表中会生成重复的 id 值。那么如何保证水平分表后的多张表中的 id 是全局唯一性的呢？</p>","r":{"minutes":6.52,"words":1957},"y":"a","t":"雪花算法"},[":md"]],
  ["v-151d81e0","/netty/nio/bytebuffer.html",{"a":"vingkin","d":1658275200000,"l":"2022年7月20日","e":"<p>有一普通文本文件 data.txt，内容为</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>1234567890abcd\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div><p>使用 FileChannel 来读取文件内容</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ChannelDemo1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RandomAccessFile</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RandomAccessFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloword/data.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rw\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">FileChannel</span> channel <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">ByteBuffer</span> buffer <span class=\"token operator\">=</span> <span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 向 buffer 写入</span>\n                <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读到字节数：{}\"</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\">// 切换 buffer 读模式</span>\n                buffer<span class=\"token punctuation\">.</span><span class=\"token function\">flip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">hasRemaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\">// 切换 buffer 写模式</span>\n                buffer<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":6.19,"words":1856},"y":"a","t":"ByteBuffer"},[":md"]],
  ["v-26c53942","/netty/nio/file_programming.html",{"a":"vingkin","d":1658361600000,"l":"2022年7月21日","e":"<h2> FileChannel</h2>\n<h3> FileChannel 工作模式⚠️</h3>\n<blockquote>\n<p>FileChannel 只能工作在阻塞模式下</p>\n</blockquote>\n<h3> 获取</h3>\n<p>不能直接打开 FileChannel，必须通过 FileInputStream、FileOutputStream 或者 RandomAccessFile 来获取 FileChannel，它们都有 getChannel 方法</p>\n<ul>\n<li>通过 FileInputStream 获取的 channel 只能读</li>\n<li>通过 FileOutputStream 获取的 channel 只能写</li>\n<li>通过 RandomAccessFile 是否能读写根据构造 RandomAccessFile 时的读写模式决定</li>\n</ul>","r":{"minutes":4.13,"words":1240},"y":"a","t":"文件编程"},[":md"]],
  ["v-04a5c7f2","/netty/nio/network_programming.html",{"a":"vingkin","d":1658361600000,"l":"2022年7月21日","e":"<h2> 非阻塞 vs 阻塞</h2>\n<h3> 阻塞</h3>\n<ul>\n<li>阻塞模式下，相关方法都会导致线程暂停\n<ul>\n<li>ServerSocketChannel.accept 会在没有连接建立时让线程暂停</li>\n<li>SocketChannel.read 会在没有数据可读时让线程暂停</li>\n<li>阻塞的表现其实就是线程暂停了，暂停期间不会占用 cpu，但线程相当于闲置</li>\n</ul>\n</li>\n<li>单线程下，阻塞方法之间相互影响，几乎不能正常工作，需要多线程支持</li>\n<li>但多线程下，有新的问题，体现在以下方面\n<ul>\n<li>32 位 jvm 一个线程 320k，64 位 jvm 一个线程 1024k，如果连接数过多，必然导致 OOM，并且线程太多，反而会因为频繁上下文切换导致性能降低</li>\n<li>可以采用线程池技术来减少线程数和线程上下文切换，但治标不治本，如果有很多连接建立，但长时间 inactive，会阻塞线程池中所有线程，因此不适合长连接，只适合短连接</li>\n</ul>\n</li>\n</ul>","r":{"minutes":14.19,"words":4257},"y":"a","t":"网络编程"},[":md"]],
  ["v-20d8b3e1","/netty/nio/NIOvsBIO.html",{"a":"vingkin","d":1658448000000,"l":"2022年7月22日","e":"<h2> stream vs channel</h2>\n<ul>\n<li>stream 不会自动缓冲数据，channel 会利用系统提供的发送缓冲区、接收缓冲区（更为底层）</li>\n<li>stream 仅支持阻塞 API，channel 同时支持阻塞、非阻塞 API，网络 channel 可配合 selector 实现多路复用</li>\n<li>二者均为全双工，即读写可以同时进行</li>\n</ul>\n<h2> IO 模型</h2>\n<p>同步阻塞、同步非阻塞、同步多路复用、异步阻塞（没有此情况）、异步非阻塞</p>\n<ul>\n<li>同步：线程自己去获取结果（一个线程）</li>\n<li>异步：线程自己不去获取结果，而是由其它线程送结果（至少两个线程）</li>\n</ul>","r":{"minutes":6.34,"words":1903},"y":"a","t":"NIO vs. BIO"},[":md"]],
  ["v-2ca4ecc4","/netty/nio/three_component.html",{"a":"vingkin","d":1658275200000,"l":"2022年7月20日","e":"<h2> Channel &amp; Buffer</h2>\n<p>channel 有一点类似于 stream，它就是读写数据的<strong>双向通道</strong>，可以从 channel 将数据读入 buffer，也可以将 buffer 的数据写入 channel，而之前的 stream 要么是输入，要么是输出，channel 比 stream 更为底层</p>\n<img src=\"https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/os/20220721171100.png\" title=\"\" alt=\"\" data-align=\"center\">","r":{"minutes":1.23,"words":368},"y":"a","t":"三大组件"},[":md"]],
  ["v-16d38cb0","/netty/optimization/optimization.html",{"a":"vingkin","d":1659052800000,"l":"2022年7月29日","e":"<h2> 扩展序列化算法</h2>\n<p>序列化，反序列化主要用在消息正文的转换上</p>\n<ul>\n<li>序列化时，需要将 Java 对象变为要传输的数据（可以是 byte[]，或 json 等，最终都需要变成 byte[]）</li>\n<li>反序列化时，需要将传入的正文数据还原成 Java 对象，便于处理</li>\n</ul>\n<p>目前的代码仅支持 Java 自带的序列化，反序列化机制，核心代码如下</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// 反序列化</span>\n<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>bodyLength<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nbyteByf<span class=\"token punctuation\">.</span><span class=\"token function\">readBytes</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ObjectInputStream</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayInputStream</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Message</span> message <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span><span class=\"token punctuation\">)</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmessage<span class=\"token punctuation\">.</span><span class=\"token function\">setSequenceId</span><span class=\"token punctuation\">(</span>sequenceId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 序列化</span>\n<span class=\"token class-name\">ByteArrayOutputStream</span> out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> out<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":9.93,"words":2980},"y":"a","t":"Netty优化"},[":md"]],
  ["v-821a7378","/netty/optimization/source_code.html",{"a":"vingkin","d":1659052800000,"l":"2022年7月29日","e":"<h2> 启动剖析</h2>\n<p>我们就来看看 netty 中对下面的代码是怎样进行处理的</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">//1 netty 中使用 NioEventLoopGroup （简称 nio boss 线程）来封装线程和 selector</span>\n<span class=\"token class-name\">Selector</span> selector <span class=\"token operator\">=</span> <span class=\"token class-name\">Selector</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\">//2 创建 NioServerSocketChannel，同时会初始化它关联的 handler，以及为原生 ssc 存储 config</span>\n<span class=\"token class-name\">NioServerSocketChannel</span> attachment <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NioServerSocketChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//3 创建 NioServerSocketChannel 时，创建了 java 原生的 ServerSocketChannel</span>\n<span class=\"token class-name\">ServerSocketChannel</span> serverSocketChannel <span class=\"token operator\">=</span> <span class=\"token class-name\">ServerSocketChannel</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nserverSocketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">configureBlocking</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//4 启动 nio boss 线程执行接下来的操作</span>\n\n<span class=\"token comment\">//5 注册（仅关联 selector 和 NioServerSocketChannel），未关注事件</span>\n<span class=\"token class-name\">SelectionKey</span> selectionKey <span class=\"token operator\">=</span> serverSocketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> attachment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//6 head -&gt; 初始化器 -&gt; ServerBootstrapAcceptor -&gt; tail，初始化器是一次性的，只为添加 acceptor</span>\n\n<span class=\"token comment\">//7 绑定端口</span>\nserverSocketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InetSocketAddress</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//8 触发 channel active 事件，在 head 中关注 op_accept 事件</span>\nselectionKey<span class=\"token punctuation\">.</span><span class=\"token function\">interestOps</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OP_ACCEPT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":11.34,"words":3402},"y":"a","t":"Netty源码分析"},[":md"]],
  ["v-6d94a1ab","/interview/systemdesign/base/Idempotency.html",{"a":"Vingkin","d":1654387200000,"l":"2022年6月5日","e":"<blockquote>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg5NjMxMTYxNQ==&amp;mid=2247488050&amp;idx=1&amp;sn=1ab9d27793c9bc4698eb35949631a738&amp;source=41#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\">幂等性如何实现？带你了解一波！！！</a></p>\n</blockquote>\n<p>所谓幂等性通俗的将就是一次请求和多次请求同一个资源产生相同的副作用。用数学语言表达就是f(x)=f(f(x))。</p>","r":{"minutes":4.22,"words":1265},"y":"a","t":"幂等性"},[":md"]],
  ["v-810985aa","/microservice/middleware/elasticsearch/ElasticSearchApp.html",{"a":"Vingkin","d":1695168000000,"l":"2023年9月20日","e":"<h2> TODO</h2>\n","r":{"minutes":0.04,"words":11},"y":"a","t":"ElasticSearch 实战"},[":md"]],
  ["v-b1547596","/microservice/middleware/elasticsearch/ElasticSearchBase.html",{"a":"Vingkin","d":1693785600000,"l":"2023年9月4日","e":"<h2> 1. 基本概念</h2>\n<h3> 1.1 索引（Index）</h3>\n<p>一个索引就是一个拥有几分相似特征的文档的集合。比如说，你可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引。一个索引由一个名字来标识（必须全部是小写字母），并且当我们要对这个索引中的文档进行索引、搜索、更新和删除的时候，都要使用到这个名字。在一个集群中，可以定义任意多的索引。</p>\n<p>能搜索的数据必须索引，这样的好处是可以提高查询速度，比如：新华字典前面的目录就是索引的意思，目录可以提高查询速度。</p>\n<p><strong></strong></p>\n<h3> 1.2 类型（Type）</h3>","r":{"minutes":10.6,"words":3179},"y":"a","t":"ElasticSearch 基础"},[":md"]],
  ["v-623319fe","/microservice/middleware/kafka/",{"a":"Vingkin","d":1696636800000,"l":"2023年10月7日","r":{"minutes":0.03,"words":8},"y":"a","t":"TODO"},["/microservice/middleware/kafka/README.md"]],
  ["v-359fa3f2","/microservice/middleware/redis/RedisApp.html",{"a":"Vingkin","d":1695254400000,"l":"2023年9月21日","e":"<p><strong>目录</strong></p>\n\n<!--more-->\n<h2> 1、短信登录</h2>\n<h3> 1.1、导入黑马点评项目</h3>\n<h4> 1.1.1 、导入SQL</h4>\n<figure><img src=\"https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/1653057872536.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<h4> 1.1.2、有关当前模型</h4>\n<p>手机或者app端发起请求，请求我们的nginx服务器，nginx基于七层模型走的事HTTP协议，可以实现基于Lua直接绕开tomcat访问redis，也可以作为静态资源服务器，轻松扛下上万并发， 负载均衡到下游tomcat服务器，打散流量，我们都知道一台4核8G的tomcat，在优化和处理简单业务的加持下，大不了就处理1000左右的并发， 经过nginx的负载均衡分流后，利用集群支撑起整个项目，同时nginx在部署了前端项目后，更是可以做到动静分离，进一步降低tomcat服务的压力，这些功能都得靠nginx起作用，所以nginx是整个项目中重要的一环。</p>","r":{"minutes":92.96,"words":27888},"y":"a","t":"Redis 实战"},[":md"]],
  ["v-383eefd9","/microservice/middleware/redis/RedisBase.html",{"a":"Vingkin","d":1694995200000,"l":"2023年9月18日","c":["redis"],"g":["redis"],"e":"<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>Redis系列整理学习自<a href=\"https://www.bilibili.com/video/BV1cr4y1671t\" target=\"_blank\" rel=\"noopener noreferrer\">黑马程序员Redis相关课程</a></p>\n</div>\n<p><strong>目录</strong></p>\n\n<!--more-->\n<h2> 1、Redis简单介绍</h2>\n<p>Redis是一种键值型的NoSql数据库，这里有两个关键字：</p>","r":{"minutes":26.81,"words":8042},"y":"a","t":"Redis 基础"},[":md"]],
  ["v-0069c1a2","/bigdata/hadoop/hdfs/1.html",{"d":1695641718000,"e":"<h2> 1. DistCp</h2>\n<blockquote>\n<p>HDFS分布式拷贝工具</p>\n</blockquote>\n<ol>\n<li>\n<p>用于数据迁移，定期在集群间或集群内部进行数据备份</p>\n</li>\n<li>\n<p>底层使用MapReduce在集群之间或并行地在同一集群内复制文件。执行复制的MapReduce只有mapper阶段。</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code>$ hadoop distcp usage: distcp OPTIONS <span class=\"token punctuation\">[</span>source_path<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>target_path<span class=\"token operator\">&gt;</span>             \n\t<span class=\"token parameter variable\">-append</span>                //拷贝文件时支持对现有文件进行追加写操作\n\t<span class=\"token parameter variable\">-async</span>                  //异步执行distcp拷贝任务\n\t<span class=\"token parameter variable\">-bandwidth</span> <span class=\"token operator\">&lt;</span>arg<span class=\"token operator\">&gt;</span>        //对每个Map任务的带宽限速\n\t<span class=\"token parameter variable\">-delete</span>                 //删除相对于源端,目标端多出来的文件\n\t<span class=\"token parameter variable\">-diff</span> <span class=\"token operator\">&lt;</span>arg<span class=\"token operator\">&gt;</span>             //通过快照diff信息进行数据的同步                  \n\t<span class=\"token parameter variable\">-overwrite</span>              //以覆盖的方式进行拷贝,如果目标端文件已经存在,则直接覆盖\n\t<span class=\"token parameter variable\">-p</span> <span class=\"token operator\">&lt;</span>arg<span class=\"token operator\">&gt;</span>                //拷贝数据时,扩展属性信息的保留,包括权限信息,块大小信息等等\n\t<span class=\"token parameter variable\">-skipcrccheck</span>          //拷贝数据时是否跳过cheacksum的校验\n\t<span class=\"token parameter variable\">-update</span>                 //拷贝数据时,只拷贝相对于源端 ,目标端不存在的文件数据\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ol>","r":{"minutes":18.11,"words":5433},"y":"a","t":"HDFS 集群管理与运维"},[":md"]],
  ["v-021e9a41","/bigdata/hadoop/hdfs/2.html",{"d":1695641718000,"e":"<h2> 1. HDFS架构剖析</h2>\n<p>略</p>\n<h2> 2. HDFS Web Interfaces</h2>\n<p>略</p>\n<h2> 3. HDFS读写流程</h2>\n<h3> 3.1 HDFS写数据流程</h3>\n<h4> Pipeline管道</h4>\n<blockquote>\n<p>客户端将数据块写入第一个数据节点，第一个数据节点保存数据之后再将块复制到第二个数据节点，后者保存后将其复制到第三个数据节点</p>\n</blockquote>\n<p><strong>为什么datanode之间采用pipeline线性传输，而不是一次给三个datanode拓扑式传输呢？</strong></p>","r":{"minutes":5.67,"words":1701},"y":"a","t":"HDFS 架构原理"},[":md"]],
  ["v-03d372e0","/bigdata/hadoop/hdfs/3.html",{"d":1695641718000,"e":"<h2> 1. HDFS Trash垃圾桶</h2>\n<blockquote>\n<p>该概念就和Windows的垃圾桶一样，默认不开启</p>\n</blockquote>\n<h3> 1.1 功能描述</h3>\n<ul>\n<li>启用Trash功能后，从HDFS中删除某些内容时，文件或目录不会立即被清除，它们将被移动到回收站Current目录中**(/user/${username}/.Trash/current)**。</li>\n<li>最近删除的文件被移动到回收站Current目录，并且在可配置的时间间隔内，HDFS会为在Current回收站目录下的文件创建检查点/user/${username}/.Trash/&lt;日期&gt;，并在过期时删除旧的检查点。</li>\n</ul>","r":{"minutes":12.98,"words":3895},"y":"a","t":"HDFS 数据安全与隐私保护"},[":md"]],
  ["v-05884b7f","/bigdata/hadoop/hdfs/4.html",{"d":1695641718000,"e":"<h2> TODO</h2>\n","r":{"minutes":0.02,"words":7},"y":"a","t":"HDFS 源码分析"},[":md"]],
  ["v-44f26549","/bigdata/hive/1.html",{"d":1695641718000,"e":"<h2> 1. 数据仓库</h2>\n<blockquote>\n<p><strong>数据仓库</strong>（英语：Data Warehouse，简称<strong>数仓</strong>、<strong>DW</strong>）,是一个用于存储、分析、报告的数据系统。<br>\n数据仓库的目的是构建<strong>面向分析</strong>的集成化数据环境，分析结果为企业提供决策支持（Decision Support）。</p>\n</blockquote>\n<h3> 1.1 数据仓库、数据库、数据集市</h3>\n<h4> 1.1.1 OLTP、OLAP</h4>\n<blockquote>\n<p>联机<strong>事务</strong>处理 OLTP（On-Line <strong>Transaction</strong> Processing）<br>\n联机<strong>分析</strong>处理 OLAP（On-Line <strong>Analytical</strong> Processing）</p>\n</blockquote>","r":{"minutes":9.89,"words":2966},"y":"a","t":"数据仓库基础与 Apache Hive 入门"},[":md"]],
  ["v-46a73de8","/bigdata/hive/2.html",{"d":1695641718000,"e":"<h2> 1 Hive SQL DDL建表基础语法</h2>\n<h3> 1.1 Hive建表完整语法树</h3>\n<ul>\n<li><strong>蓝色字体</strong>是建表语法的关键字，用于指定某些功能。</li>\n<li>**[ ]**中括号的语法表示可选。</li>\n<li>**|**表示使用的时候，左右语法二选一。</li>\n<li><strong>建表语句中的语法顺序要和语法树中顺序保持一致。</strong></li>\n</ul>\n<figure><img src=\"https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251621543.png\" alt=\"Hive建表完整语法树\" tabindex=\"0\" loading=\"lazy\"><figcaption>Hive建表完整语法树</figcaption></figure>","r":{"minutes":20.15,"words":6044},"y":"a","t":"Hive SQL 数据定义语言（DDL）"},[":md"]],
  ["v-485c1687","/bigdata/hive/3.html",{"d":1695641718000,"e":"<h2> 1. Hive SQL-DML-Load加载数据</h2>\n<blockquote>\n<p>所谓加载是指：将数据文件移动到与Hive表对应的位置，移动时是纯复制、移动操作。</p>\n<p>对于local（Hiveserver2所在机器）是复制操作，HDFS中的文件时移动操作。</p>\n</blockquote>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><pre class=\"language-sql\"><code><span class=\"token comment\">------ load语法规则 ----</span>\n<span class=\"token keyword\">LOAD</span> <span class=\"token keyword\">DATA</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">LOCAL</span><span class=\"token punctuation\">]</span> INPATH <span class=\"token string\">'filepath'</span> <span class=\"token punctuation\">[</span>OVERWRITE<span class=\"token punctuation\">]</span> <span class=\"token keyword\">INTO</span> <span class=\"token keyword\">TABLE</span> tablename <span class=\"token punctuation\">[</span><span class=\"token keyword\">PARTITION</span> <span class=\"token punctuation\">(</span>partcol1<span class=\"token operator\">=</span>val1<span class=\"token punctuation\">,</span> partcol2<span class=\"token operator\">=</span>val2 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">LOAD</span> <span class=\"token keyword\">DATA</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">LOCAL</span><span class=\"token punctuation\">]</span> INPATH <span class=\"token string\">'filepath'</span> <span class=\"token punctuation\">[</span>OVERWRITE<span class=\"token punctuation\">]</span> <span class=\"token keyword\">INTO</span> <span class=\"token keyword\">TABLE</span> tablename <span class=\"token punctuation\">[</span><span class=\"token keyword\">PARTITION</span> <span class=\"token punctuation\">(</span>partcol1<span class=\"token operator\">=</span>val1<span class=\"token punctuation\">,</span> partcol2<span class=\"token operator\">=</span>val2 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>INPUTFORMAT <span class=\"token string\">'inputformat'</span> SERDE <span class=\"token string\">'serde'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3.0</span> <span class=\"token operator\">or</span> later<span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":21.07,"words":6322},"y":"a","t":"Hive SQL 数据操控、查询语言（DML，DQL）"},[":md"]],
  ["v-4a10ef26","/bigdata/hive/4.html",{"d":1695641718000,"e":"<h2> 1. Hive内置运算符</h2>\n<blockquote>\n<p>关系运算符、算术运算符、逻辑运算符</p>\n</blockquote>\n<div class=\"language-sql line-numbers-mode\" data-ext=\"sql\"><pre class=\"language-sql\"><code><span class=\"token comment\">-- 显示所有的函数和运算符</span>\n<span class=\"token keyword\">show</span> functions<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 查看运算符或者函数的使用说明</span>\n<span class=\"token keyword\">describe</span> <span class=\"token keyword\">function</span> <span class=\"token operator\">+</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 使用extended 可以查看更加详细的使用说明</span>\n<span class=\"token keyword\">describe</span> <span class=\"token keyword\">function</span> <span class=\"token keyword\">extended</span> count<span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":26.49,"words":7948},"y":"a","t":"Hive 函数、运算符使用"},[":md"]],
  ["v-4bc5c7c5","/bigdata/hive/5.html",{"d":1695641718000,"e":"<h2> 1. Hive中多字节分隔符处理</h2>\n<blockquote>\n<p>Hive默认序列化类是<code>LazySimpleSerDe</code>，其<strong>只支持使用单字节分隔符（char）<strong>来加载文本数据，所以遇到</strong>多字符</strong>或者<strong>数据字段中包含了分隔符</strong>，那么<code>LazySimpleSerDe</code>就不再适用了。</p>\n</blockquote>\n<h3> 1.1 问题和需求</h3>\n<p>比如下面的两种情况：</p>\n<p><strong>多字符分隔符：</strong></p>","r":{"minutes":10.27,"words":3081},"y":"a","t":"Hive 函数重要应用案例"},[":md"]],
  ["v-4d7aa064","/bigdata/hive/6.html",{"d":1695641718000,"e":"<h2> 1. Hive表设计优化</h2>\n<h3> 1.1 分区表结构设计</h3>\n<blockquote>\n<p>Hive在执行查询计划时，会<strong>使用表的最后一级目录作为底层处理数据的输入</strong>。如果不使用分区表，那么表目录下的所有文件将都会被加载，会导致大量磁盘和网络的IO损耗。</p>\n</blockquote>\n<h4> 1.1.1 普通表结构问题</h4>\n<ul>\n<li>假设每天有1G的数据增量，一年就是365GB的数据，按照业务需求，每次只需要对其中一天的数据进行处理，也就是处理1GB的数据；</li>\n<li>程序会先加载365GB的数据，然后将364GB的数据过滤掉，只保留一天的数据再进行计算，<strong>导致了大量的磁盘和网络的IO的损耗</strong>。</li>\n</ul>","r":{"minutes":22.42,"words":6727},"y":"a","t":"Hive 性能优化及 Hive3 新特性"},[":md"]],
  ["v-3c587b52","/interview/systemdesign/framework/MyBatis.html",{"a":"Vingkin","d":1691366400000,"l":"2023年8月7日","e":"<h2> Mybatis</h2>\n<h3> @Param / @RequestBody</h3>\n<ol>\n<li>发现在dao层方法接口的参数中不用<code>@Param</code>指定参数名称，在xml中也是可以直接用<code>#{}</code>来对参数进行引用，查了很多资料解释是idea进行了预处理，所以即使不报错，也需要在dao层参数名称位置指定具体名称，以免其他开发环境下出现bug。</li>\n<li>@RequestBody是对json格式的入参进行处理，<strong>将json格式数据封装成具体的vo或者po实体类</strong>，目前现在都是前后端分离的项目，前端传过来的参数都是json格式的，所以在controller层实体类型的参数前需要加上@RequestBody注解。</li>\n</ol>","r":{"minutes":5.52,"words":1657},"y":"a","t":"MyBatis / MyBatis-Plus"},[":md"]],
  ["v-86824a00","/interview/systemdesign/framework/spriiiiing.html",{"d":1695657129000,"e":"<h2> 容器与 bean</h2>\n<h3> 1) 容器接口</h3>\n<ul>\n<li>\n<p>BeanFactory 接口，典型功能有：</p>\n<ul>\n<li>getBean</li>\n</ul>\n</li>\n<li>\n<p>ApplicationContext 接口，是 BeanFactory 的子接口。它扩展了 BeanFactory 接口的功能，如：</p>\n<ul>\n<li>国际化</li>\n<li>通配符方式获取一组 Resource 资源</li>\n<li>整合 Environment 环境（能通过它获取各种来源的配置信息）</li>\n<li>事件发布与监听，实现组件之间的解耦</li>\n</ul>\n</li>\n</ul>","r":{"minutes":49.99,"words":14996},"y":"a","t":"Spring 高级"},[":md"]],
  ["v-4cfe1d20","/interview/systemdesign/framework/Spring.html",{"a":"Vingkin","d":1650758400000,"l":"2022年4月24日","e":"<h2> 列举一些重要的Spring模块</h2>\n<p>下图对应的是 Spring4.x 版本。目前最新的 5.x 版本中 Web 模块的 Portlet 组件已经被废弃掉，同时增加了用于异步响应式处理的 WebFlux 组件。</p>\n<figure><img src=\"https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/interview/e0c60b4606711fc4a0b6faf03230247a.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>","r":{"minutes":13.39,"words":4017},"y":"a","t":"Spring"},[":md"]],
  ["v-b5b4e464","/interview/systemdesign/framework/SpringBoot.html",{"a":"Vingkin","d":1650758400000,"l":"2022年4月24日","e":"<h2> 说说你对Spring Boot的理解</h2>\n<p>从本质上来说，Spring Boot就是Spring。Spring Boot使用“约定大于配置”的理念让你的项目快速的运行起来，使用Spring Boot很容易创建一个能独立运行、准生产级别、基于Spring框架的项目，使用Spring Boot你可以不用或者只需要很少的Spring配置。</p>\n<p>简而言之，Spring Boot本身并不提供Spring的核心功能，而是作为Spring的脚手架框架，以达到快速构建项目。Spring Boot有如下优点：</p>\n<ul>\n<li>可以快速构建项目</li>\n<li>可以对主流开发框架的无配置集成</li>\n<li>项目可独立运行，无需外部依赖Servlet容器</li>\n<li>提供运行时的应用监控</li>\n<li>可以极大地提高开发、部署效率</li>\n<li>可以与云计算天然集成</li>\n</ul>","r":{"minutes":6.79,"words":2037},"y":"a","t":"SpringBoot"},[":md"]],
  ["v-3c7e43b8","/interview/systemdesign/framework/SpringMVC.html",{"a":"Vingkin","d":1650758400000,"l":"2022年4月24日","e":"<h2> 什么是MVC</h2>\n<p>MVC是一种设计模式，在这种模式下软件被分为三层，及<strong>Model（模型）、View（视图）、Controller（控制器）</strong>。Model代表的是数据，View代表的是用户界面，Controller代表的是数据的处理逻辑，它是Model和View这两层的桥梁。将软件分层的好处是，可以将对象之间的耦合度降低，便于代码的维护。</p>\n<h2> DAO层是做什么的</h2>\n<p>DAO层是Data Access Object的缩写，即数据访问对象，在项目中它通常作为独立的一层，专门用于访问数据库。</p>\n<h2> 介绍一下Spring MVC的执行流程</h2>","r":{"minutes":4.59,"words":1378},"y":"a","t":"SpringMVC"},[":md"]],
  ["v-1ae6be72","/bigdata/hadoop/yarn/1.html",{"d":1695641718000,"e":"<h2> 1. YARN架构体系</h2>\n<h3> 1.1 官方架构图</h3>\n<figure><img src=\"https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251619375.png\" alt=\"官方架构图\" tabindex=\"0\" loading=\"lazy\"><figcaption>官方架构图</figcaption></figure>\n<h3> 1.2 核心交互流程</h3>\n<ul>\n<li>MR作业状态汇报  Container（Map|Reduce Task）--&gt;Container（MrAppMaster）</li>\n<li>MR作业提交  Client--&gt;RM</li>\n<li>节点的状态汇报  NM--&gt;RM</li>\n<li>资源的申请  MrAppMaster--&gt;RM</li>\n</ul>","r":{"minutes":5.76,"words":1728},"y":"a","t":"YARN 框架概述"},[":md"]],
  ["v-5f8df061","/bigdata/hadoop/mapreduce/1.html",{"d":1695641718000,"e":"<h2> 1. MapReduce相关介绍</h2>\n<blockquote>\n<p>MapReduce是一个离线计算框架，针对静态数据集，不支持动态的离线数据</p>\n</blockquote>\n<h3> 1.1 Hadoop Writable序列化机制</h3>\n<blockquote>\n<p><strong>序列化</strong> (Serialization)是将结构化对象转换成字节流以便于进行网络传输或写入持久存储的过程。</p>\n<p><strong>反序列化</strong>（Deserialization）是将字节流转换为一系列结构化对象的过程，重新创建该对象。</p>\n</blockquote>","r":{"minutes":7.82,"words":2346},"y":"a","t":"MapReduce 基础入门"},[":md"]],
  ["v-6142c900","/bigdata/hadoop/mapreduce/2.html",{"d":1695641718000,"e":"<h2> 1. MapReduce Partition分区</h2>\n<blockquote>\n<p>注意分区与分组的区别，分区的目的是通过设置ReduceTask的数量将数据输出到不同的文件中。而每一个分组调用一次reduce程序。</p>\n</blockquote>\n<p>输出文件的个数与ReduceTask个数是一种对等关系，有几个ReduceTask，最终程序就输出几个文件。</p>\n<p>对于MapTask究竟给哪个ReduceTask处理，这就是<strong>数据分区</strong>问题。</p>\n<p>可以自己制定ReduceTask的个数：</p>\n<ul>\n<li><code>job.setNumReduceTasks(3);</code></li>\n</ul>","r":{"minutes":14.11,"words":4232},"y":"a","t":"MapReduce 基础编程"},[":md"]],
  ["v-62f7a19f","/bigdata/hadoop/mapreduce/3.html",{"d":1695641718000,"e":"<h2> 1. MapReduce Counter计数器</h2>\n<h3> 1.1 自定义Counter计数器</h3>\n<blockquote>\n<p>需求：在WordCount程序中对apple单词的数量利用计数器进行统计</p>\n</blockquote>\n<p>在map阶段自定义一个counter，并且在遍历的时候进行统计</p>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LongWritable</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Text</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Mapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LongWritable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">LongWritable</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">.</span>Context context<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// todo 从程序的上下文环境中获取全局计数器 指定计数器所属组的名字 计数器的名字</span>\n    <span class=\"token class-name\">Counter</span> counter <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getCounter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vingkin counters\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"apple counter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 拿取一行数据转换为String</span>\n    <span class=\"token class-name\">String</span> line <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 根据分隔符进行切割</span>\n    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> words <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\s+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 遍历数组</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> word <span class=\"token operator\">:</span> words<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// 计数器使用</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            counter<span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        outkey<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 输出数据 吧每个单词都标记1 输出的结果&lt;单词,1&gt;</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>outkey<span class=\"token punctuation\">,</span> outvalue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":14.36,"words":4307},"y":"a","t":"MapReduce 高阶编程"},[":md"]],
  ["v-64ac7a3e","/bigdata/hadoop/mapreduce/4.html",{"d":1695641718000,"e":"<blockquote>\n<p>记得引用老师画的图</p>\n</blockquote>\n<p>waitForCompletion（）=》submit=》和集群建立链接（connect（））=》创建Cluster对象（new Cluter()）</p>\n","r":{"minutes":0.13,"words":38},"y":"a","t":"MapReduce 整体流程核心代码解读"},[":md"]],
  ["v-666152dd","/bigdata/hadoop/mapreduce/5.html",{"d":1695641718000,"e":"<h2> 1. IO性能优化：文件类型</h2>\n<h3> 1.1 行式存储、列式存储</h3>\n<figure><img src=\"https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251619941.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>\n<p><strong>优缺点：</strong></p>\n<ul>\n<li>行存储的写入是一次性完成，消耗的时间比列存储少，并且能够保证数据的完整性，缺点是数据读取过程中会产生冗余数据，如果只有少量数据，此影响可以忽略;数量大可能会影响到数据的处理效率。<strong>行适合插入、不适合查询。</strong></li>\n<li>列存储在写入效率、保证数据完整性上都不如行存储，它的优势是在读取过程，不会产生冗余数据，这对数据完整性要求不高的大数据处理领域，比如互联网，犹为重要。<strong>列适合查询，不适合插入。</strong></li>\n</ul>","r":{"minutes":0.67,"words":202},"y":"a","t":"MapReduce 性能优化"},[":md"]],
  ["v-3706649a","/404.html",{"y":"p","t":""},[]],
  ["v-2d0a3132","/OS/",{"y":"p","t":"O S"},[]],
  ["v-2d0aa4d7","/ml/",{"y":"p","t":"Ml"},[]],
  ["v-d440f426","/tools/",{"y":"p","t":"Tools"},[]],
  ["v-23603f68","/interview/bigdata/",{"y":"p","t":"Bigdata"},[]],
  ["v-71b3ae87","/interview/",{"y":"p","t":"Interview"},[]],
  ["v-04b17156","/designmode/",{"y":"p","t":"Designmode"},[]],
  ["v-32311dcd","/interview/computer/",{"y":"p","t":"Computer"},[]],
  ["v-6fc3d76d","/interview/database/",{"y":"p","t":"Database"},[]],
  ["v-7dcae826","/interview/java/",{"y":"p","t":"Java"},[]],
  ["v-7e2e1571","/microservice/reactive/",{"y":"p","t":"Reactive"},[]],
  ["v-0314b485","/microservice/",{"y":"p","t":"Microservice"},[]],
  ["v-4fdba49a","/netty/advance/",{"y":"p","t":"Advance"},[]],
  ["v-e9d02874","/netty/",{"y":"p","t":"Netty"},[]],
  ["v-1590f844","/netty/basics/",{"y":"p","t":"Basics"},[]],
  ["v-f5e726ec","/interview/distributed/idgenerator/",{"y":"p","t":"Idgenerator"},[]],
  ["v-17014c1a","/interview/distributed/",{"y":"p","t":"Distributed"},[]],
  ["v-22443161","/netty/nio/",{"y":"p","t":"Nio"},[]],
  ["v-66fcfb48","/netty/optimization/",{"y":"p","t":"Optimization"},[]],
  ["v-1b48f263","/interview/systemdesign/base/",{"y":"p","t":"Base"},[]],
  ["v-76b165fb","/interview/systemdesign/",{"y":"p","t":"Systemdesign"},[]],
  ["v-ab01ff6c","/microservice/middleware/elasticsearch/",{"y":"p","t":"Elasticsearch"},[]],
  ["v-0a634f38","/microservice/middleware/",{"y":"p","t":"Middleware"},[]],
  ["v-49e06168","/microservice/middleware/redis/",{"y":"p","t":"Redis"},[]],
  ["v-4e5855da","/bigdata/hadoop/hdfs/",{"y":"p","t":"Hdfs"},[]],
  ["v-5f3df42c","/bigdata/hadoop/",{"y":"p","t":"Hadoop"},[]],
  ["v-02bc92be","/bigdata/",{"y":"p","t":"Bigdata"},[]],
  ["v-7f1afa7e","/bigdata/hive/",{"y":"p","t":"Hive"},[]],
  ["v-953a93a8","/interview/systemdesign/framework/",{"y":"p","t":"Framework"},[]],
  ["v-4f46b4bf","/bigdata/hadoop/yarn/",{"y":"p","t":"Yarn"},[]],
  ["v-a60b804e","/bigdata/hadoop/mapreduce/",{"y":"p","t":"Mapreduce"},[]],
  ["v-5bc93818","/category/",{"y":"p","t":"分类","I":0},[]],
  ["v-744d024e","/tag/",{"y":"p","t":"标签","I":0},[]],
  ["v-e52c881c","/article/",{"y":"p","t":"文章","I":0},[]],
  ["v-154dc4c4","/star/",{"y":"p","t":"收藏","I":0},[]],
  ["v-01560935","/timeline/",{"y":"p","t":"时间轴","I":0},[]],
  ["v-da9d4e34","/category/interview/",{"y":"p","t":"interview 分类","I":0},[]],
  ["v-00be579c","/tag/interview/",{"y":"p","t":"标签: interview","I":0},[]],
  ["v-8848dfa8","/category/redis/",{"y":"p","t":"redis 分类","I":0},[]],
  ["v-0d1f4c3c","/tag/redis/",{"y":"p","t":"标签: redis","I":0},[]],
]
