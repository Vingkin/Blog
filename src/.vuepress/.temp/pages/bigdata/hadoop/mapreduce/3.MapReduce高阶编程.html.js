export const data = JSON.parse("{\"key\":\"v-43b3d046\",\"path\":\"/bigdata/hadoop/mapreduce/3.MapReduce%E9%AB%98%E9%98%B6%E7%BC%96%E7%A8%8B.html\",\"title\":\"MapReduce高阶编程\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"MapReduce高阶编程\",\"description\":\"1. MapReduce Counter计数器 1.1 自定义Counter计数器 需求：在WordCount程序中对apple单词的数量利用计数器进行统计 在map阶段自定义一个counter，并且在遍历的时候进行统计 protected void map(LongWritable key, Text value, Mapper&lt;LongWritable, Text, Text, LongWritable&gt;.Context context) throws IOException, InterruptedException { // todo 从程序的上下文环境中获取全局计数器 指定计数器所属组的名字 计数器的名字 Counter counter = context.getCounter(\\\"vingkin counters\\\", \\\"apple counter\\\"); // 拿取一行数据转换为String String line = value.toString(); // 根据分隔符进行切割 String[] words = line.split(\\\"\\\\\\\\s+\\\"); // 遍历数组 for (String word : words) { // 计数器使用 if (\\\"apple\\\".equals(word)) { counter.increment(1); } outkey.set(word); // 输出数据 吧每个单词都标记1 输出的结果&lt;单词,1&gt; context.write(outkey, outvalue); } }\"},\"headers\":[{\"level\":2,\"title\":\"1.1 自定义Counter计数器\",\"slug\":\"_1-1-自定义counter计数器\",\"link\":\"#_1-1-自定义counter计数器\",\"children\":[]},{\"level\":2,\"title\":\"2.1 MapReduce读取Mysql操作\",\"slug\":\"_2-1-mapreduce读取mysql操作\",\"link\":\"#_2-1-mapreduce读取mysql操作\",\"children\":[]},{\"level\":2,\"title\":\"2.2 MapReducer写入Mysql操作\",\"slug\":\"_2-2-mapreducer写入mysql操作\",\"link\":\"#_2-2-mapreducer写入mysql操作\",\"children\":[]},{\"level\":2,\"title\":\"3.1 Reduce Side Join\",\"slug\":\"_3-1-reduce-side-join\",\"link\":\"#_3-1-reduce-side-join\",\"children\":[]},{\"level\":2,\"title\":\"3.2 MapReduce分布式缓存\",\"slug\":\"_3-2-mapreduce分布式缓存\",\"link\":\"#_3-2-mapreduce分布式缓存\",\"children\":[]},{\"level\":2,\"title\":\"3.3 Map Side Join\",\"slug\":\"_3-3-map-side-join\",\"link\":\"#_3-3-map-side-join\",\"children\":[]}],\"git\":{\"createdTime\":null,\"updatedTime\":null,\"contributors\":[]},\"readingTime\":{\"minutes\":14.36,\"words\":4307},\"filePathRelative\":\"bigdata/hadoop/mapreduce/3.MapReduce高阶编程.md\",\"excerpt\":\"<h1> 1. MapReduce Counter计数器</h1>\\n<h2> 1.1 自定义Counter计数器</h2>\\n<blockquote>\\n<p>需求：在WordCount程序中对apple单词的数量利用计数器进行统计</p>\\n</blockquote>\\n<p>在map阶段自定义一个counter，并且在遍历的时候进行统计</p>\\n<div class=\\\"language-java line-numbers-mode\\\" data-ext=\\\"java\\\"><pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">LongWritable</span> key<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Text</span> value<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Mapper</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">LongWritable</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Text</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Text</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">LongWritable</span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token punctuation\\\">.</span>Context context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> <span class=\\\"token class-name\\\">IOException</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">InterruptedException</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n    <span class=\\\"token comment\\\">// todo 从程序的上下文环境中获取全局计数器 指定计数器所属组的名字 计数器的名字</span>\\n    <span class=\\\"token class-name\\\">Counter</span> counter <span class=\\\"token operator\\\">=</span> context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getCounter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"vingkin counters\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"apple counter\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// 拿取一行数据转换为String</span>\\n    <span class=\\\"token class-name\\\">String</span> line <span class=\\\"token operator\\\">=</span> value<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// 根据分隔符进行切割</span>\\n    <span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> words <span class=\\\"token operator\\\">=</span> line<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"\\\\\\\\s+\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// 遍历数组</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">String</span> word <span class=\\\"token operator\\\">:</span> words<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n        <span class=\\\"token comment\\\">// 计数器使用</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"apple\\\"</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>word<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            counter<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">increment</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        outkey<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">set</span><span class=\\\"token punctuation\\\">(</span>word<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">// 输出数据 吧每个单词都标记1 输出的结果&lt;单词,1&gt;</span>\\n        context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">write</span><span class=\\\"token punctuation\\\">(</span>outkey<span class=\\\"token punctuation\\\">,</span> outvalue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\",\"copyright\":{\"author\":\"Vingkin\"},\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
