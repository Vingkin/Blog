export const data = JSON.parse("{\"key\":\"v-8aae96f2\",\"path\":\"/bigdata/hive/6.Hive%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%8F%8AHive3%E6%96%B0%E7%89%B9%E6%80%A7.html\",\"title\":\"Hive性能优化及Hive3新特性\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"Hive性能优化及Hive3新特性\",\"description\":\"1. Hive表设计优化 1.1 分区表结构设计 Hive在执行查询计划时，会使用表的最后一级目录作为底层处理数据的输入。如果不使用分区表，那么表目录下的所有文件将都会被加载，会导致大量磁盘和网络的IO损耗。 1.1.1 普通表结构问题 假设每天有1G的数据增量，一年就是365GB的数据，按照业务需求，每次只需要对其中一天的数据进行处理，也就是处理1GB的数据； 程序会先加载365GB的数据，然后将364GB的数据过滤掉，只保留一天的数据再进行计算，导致了大量的磁盘和网络的IO的损耗。\"},\"headers\":[{\"level\":2,\"title\":\"1.1 分区表结构设计\",\"slug\":\"_1-1-分区表结构设计\",\"link\":\"#_1-1-分区表结构设计\",\"children\":[{\"level\":3,\"title\":\"1.1.1 普通表结构问题\",\"slug\":\"_1-1-1-普通表结构问题\",\"link\":\"#_1-1-1-普通表结构问题\",\"children\":[]},{\"level\":3,\"title\":\"1.1.2 分区设计思想\",\"slug\":\"_1-1-2-分区设计思想\",\"link\":\"#_1-1-2-分区设计思想\",\"children\":[]}]},{\"level\":2,\"title\":\"1.2 分桶表结构设计\",\"slug\":\"_1-2-分桶表结构设计\",\"link\":\"#_1-2-分桶表结构设计\",\"children\":[{\"level\":3,\"title\":\"1.2.1 分桶表设计思想\",\"slug\":\"_1-2-1-分桶表设计思想\",\"link\":\"#_1-2-1-分桶表设计思想\",\"children\":[]},{\"level\":3,\"title\":\"1.2.2 优化Join\",\"slug\":\"_1-2-2-优化join\",\"link\":\"#_1-2-2-优化join\",\"children\":[]}]},{\"level\":2,\"title\":\"1.3 索引设计\",\"slug\":\"_1-3-索引设计\",\"link\":\"#_1-3-索引设计\",\"children\":[{\"level\":3,\"title\":\"1.3.1 Hive中的索引\",\"slug\":\"_1-3-1-hive中的索引\",\"link\":\"#_1-3-1-hive中的索引\",\"children\":[]},{\"level\":3,\"title\":\"1.3.3 索引的目的\",\"slug\":\"_1-3-3-索引的目的\",\"link\":\"#_1-3-3-索引的目的\",\"children\":[]},{\"level\":3,\"title\":\"1.3.4 索引的使用\",\"slug\":\"_1-3-4-索引的使用\",\"link\":\"#_1-3-4-索引的使用\",\"children\":[]},{\"level\":3,\"title\":\"1.3.5 索引的问题\",\"slug\":\"_1-3-5-索引的问题\",\"link\":\"#_1-3-5-索引的问题\",\"children\":[]}]},{\"level\":2,\"title\":\"2.1 文件格式\",\"slug\":\"_2-1-文件格式\",\"link\":\"#_2-1-文件格式\",\"children\":[{\"level\":3,\"title\":\"2.1.1 TextFile\",\"slug\":\"_2-1-1-textfile\",\"link\":\"#_2-1-1-textfile\",\"children\":[]},{\"level\":3,\"title\":\"2.1.2 SequenceFile\",\"slug\":\"_2-1-2-sequencefile\",\"link\":\"#_2-1-2-sequencefile\",\"children\":[]},{\"level\":3,\"title\":\"2.1.3 Parquet\",\"slug\":\"_2-1-3-parquet\",\"link\":\"#_2-1-3-parquet\",\"children\":[]},{\"level\":3,\"title\":\"2.1.4 ORC\",\"slug\":\"_2-1-4-orc\",\"link\":\"#_2-1-4-orc\",\"children\":[]}]},{\"level\":2,\"title\":\"2.2 数据压缩\",\"slug\":\"_2-2-数据压缩\",\"link\":\"#_2-2-数据压缩\",\"children\":[{\"level\":3,\"title\":\"2.2.1 概述\",\"slug\":\"_2-2-1-概述\",\"link\":\"#_2-2-1-概述\",\"children\":[]},{\"level\":3,\"title\":\"2.2.2 使用\",\"slug\":\"_2-2-2-使用\",\"link\":\"#_2-2-2-使用\",\"children\":[]}]},{\"level\":2,\"title\":\"2.3 存储优化\",\"slug\":\"_2-3-存储优化\",\"link\":\"#_2-3-存储优化\",\"children\":[{\"level\":3,\"title\":\"2.3.1 避免小文件生成\",\"slug\":\"_2-3-1-避免小文件生成\",\"link\":\"#_2-3-1-避免小文件生成\",\"children\":[]},{\"level\":3,\"title\":\"2.3.2 如何读取小文件\",\"slug\":\"_2-3-2-如何读取小文件\",\"link\":\"#_2-3-2-如何读取小文件\",\"children\":[]},{\"level\":3,\"title\":\"2.3.3 ORC文件索引\",\"slug\":\"_2-3-3-orc文件索引\",\"link\":\"#_2-3-3-orc文件索引\",\"children\":[]},{\"level\":3,\"title\":\"2.3.4 ORC矢量查询\",\"slug\":\"_2-3-4-orc矢量查询\",\"link\":\"#_2-3-4-orc矢量查询\",\"children\":[]}]},{\"level\":2,\"title\":\"3.1 explain查询计划\",\"slug\":\"_3-1-explain查询计划\",\"link\":\"#_3-1-explain查询计划\",\"children\":[{\"level\":3,\"title\":\"3.1.1 语法\",\"slug\":\"_3-1-1-语法\",\"link\":\"#_3-1-1-语法\",\"children\":[]},{\"level\":3,\"title\":\"3.1.2 输出组成\",\"slug\":\"_3-1-2-输出组成\",\"link\":\"#_3-1-2-输出组成\",\"children\":[]}]},{\"level\":2,\"title\":\"3.2 MapReduce属性优化\",\"slug\":\"_3-2-mapreduce属性优化\",\"link\":\"#_3-2-mapreduce属性优化\",\"children\":[{\"level\":3,\"title\":\"3.2.1 本地模式\",\"slug\":\"_3-2-1-本地模式\",\"link\":\"#_3-2-1-本地模式\",\"children\":[]},{\"level\":3,\"title\":\"3.2.2 JVM重用\",\"slug\":\"_3-2-2-jvm重用\",\"link\":\"#_3-2-2-jvm重用\",\"children\":[]},{\"level\":3,\"title\":\"3.2.3 并行执行\",\"slug\":\"_3-2-3-并行执行\",\"link\":\"#_3-2-3-并行执行\",\"children\":[]}]},{\"level\":2,\"title\":\"3.3 Join优化\",\"slug\":\"_3-3-join优化\",\"link\":\"#_3-3-join优化\",\"children\":[{\"level\":3,\"title\":\"3.3.1 Map Join\",\"slug\":\"_3-3-1-map-join\",\"link\":\"#_3-3-1-map-join\",\"children\":[]},{\"level\":3,\"title\":\"3.3.2 Reduce Join\",\"slug\":\"_3-3-2-reduce-join\",\"link\":\"#_3-3-2-reduce-join\",\"children\":[]},{\"level\":3,\"title\":\"3.3.3 Bucket Join\",\"slug\":\"_3-3-3-bucket-join\",\"link\":\"#_3-3-3-bucket-join\",\"children\":[]}]},{\"level\":2,\"title\":\"3.4 优化器\",\"slug\":\"_3-4-优化器\",\"link\":\"#_3-4-优化器\",\"children\":[{\"level\":3,\"title\":\"3.4.1 背景\",\"slug\":\"_3-4-1-背景\",\"link\":\"#_3-4-1-背景\",\"children\":[]},{\"level\":3,\"title\":\"3.4.2 使用\",\"slug\":\"_3-4-2-使用\",\"link\":\"#_3-4-2-使用\",\"children\":[]},{\"level\":3,\"title\":\"3.4.3 优化器介绍\",\"slug\":\"_3-4-3-优化器介绍\",\"link\":\"#_3-4-3-优化器介绍\",\"children\":[]}]},{\"level\":2,\"title\":\"3.5 谓词下推（PPD）\",\"slug\":\"_3-5-谓词下推-ppd\",\"link\":\"#_3-5-谓词下推-ppd\",\"children\":[{\"level\":3,\"title\":\"3.5.1 示例\",\"slug\":\"_3-5-1-示例\",\"link\":\"#_3-5-1-示例\",\"children\":[]},{\"level\":3,\"title\":\"3.5.2 规则\",\"slug\":\"_3-5-2-规则\",\"link\":\"#_3-5-2-规则\",\"children\":[]}]},{\"level\":2,\"title\":\"3.6 数据倾斜\",\"slug\":\"_3-6-数据倾斜\",\"link\":\"#_3-6-数据倾斜\",\"children\":[{\"level\":3,\"title\":\"3.6.1 group by, count(distinct)时的倾斜\",\"slug\":\"_3-6-1-group-by-count-distinct-时的倾斜\",\"link\":\"#_3-6-1-group-by-count-distinct-时的倾斜\",\"children\":[]},{\"level\":3,\"title\":\"方案三：数据倾斜时自动负载均衡\",\"slug\":\"方案三-数据倾斜时自动负载均衡\",\"link\":\"#方案三-数据倾斜时自动负载均衡\",\"children\":[]},{\"level\":3,\"title\":\"3.6.2 join时的倾斜\",\"slug\":\"_3-6-2-join时的倾斜\",\"link\":\"#_3-6-2-join时的倾斜\",\"children\":[]}]},{\"level\":2,\"title\":\"4.1 Hive on Tez\",\"slug\":\"_4-1-hive-on-tez\",\"link\":\"#_4-1-hive-on-tez\",\"children\":[]},{\"level\":2,\"title\":\"4.2 Hive LLAP更新\",\"slug\":\"_4-2-hive-llap更新\",\"link\":\"#_4-2-hive-llap更新\",\"children\":[]},{\"level\":2,\"title\":\"4.3 Metastore独立模式\",\"slug\":\"_4-3-metastore独立模式\",\"link\":\"#_4-3-metastore独立模式\",\"children\":[]}],\"git\":{\"createdTime\":null,\"updatedTime\":null,\"contributors\":[]},\"readingTime\":{\"minutes\":22.41,\"words\":6724},\"filePathRelative\":\"bigdata/hive/6.Hive性能优化及Hive3新特性.md\",\"excerpt\":\"<h1> 1. Hive表设计优化</h1>\\n<h2> 1.1 分区表结构设计</h2>\\n<blockquote>\\n<p>Hive在执行查询计划时，会<strong>使用表的最后一级目录作为底层处理数据的输入</strong>。如果不使用分区表，那么表目录下的所有文件将都会被加载，会导致大量磁盘和网络的IO损耗。</p>\\n</blockquote>\\n<h3> 1.1.1 普通表结构问题</h3>\\n<ul>\\n<li>假设每天有1G的数据增量，一年就是365GB的数据，按照业务需求，每次只需要对其中一天的数据进行处理，也就是处理1GB的数据；</li>\\n<li>程序会先加载365GB的数据，然后将364GB的数据过滤掉，只保留一天的数据再进行计算，<strong>导致了大量的磁盘和网络的IO的损耗</strong>。</li>\\n</ul>\",\"copyright\":{\"author\":\"Vingkin\"},\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
