export const data = JSON.parse("{\"key\":\"v-177b0212\",\"path\":\"/bigdata/hive/5.Hive%E5%87%BD%E6%95%B0%E9%87%8D%E8%A6%81%E5%BA%94%E7%94%A8%E6%A1%88%E4%BE%8B.html\",\"title\":\"Hive函数重要应用案例\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"Hive函数重要应用案例\",\"description\":\"1. Hive中多字节分隔符处理 Hive默认序列化类是LazySimpleSerDe，其只支持使用单字节分隔符（char）来加载文本数据，所以遇到多字符或者数据字段中包含了分隔符，那么LazySimpleSerDe就不再适用了。 1.1 问题和需求 比如下面的两种情况： 多字符分隔符：\"},\"headers\":[{\"level\":2,\"title\":\"1.1 问题和需求\",\"slug\":\"_1-1-问题和需求\",\"link\":\"#_1-1-问题和需求\",\"children\":[]},{\"level\":2,\"title\":\"1.2 解决方案一：替换分隔符\",\"slug\":\"_1-2-解决方案一-替换分隔符\",\"link\":\"#_1-2-解决方案一-替换分隔符\",\"children\":[]},{\"level\":2,\"title\":\"1.3 解决方案二：RegexSerDe正则加载\",\"slug\":\"_1-3-解决方案二-regexserde正则加载\",\"link\":\"#_1-3-解决方案二-regexserde正则加载\",\"children\":[]},{\"level\":2,\"title\":\"1.4 解决方案三：自定义InputFormat\",\"slug\":\"_1-4-解决方案三-自定义inputformat\",\"link\":\"#_1-4-解决方案三-自定义inputformat\",\"children\":[]},{\"level\":2,\"title\":\"2.1 parse_url\",\"slug\":\"_2-1-parse-url\",\"link\":\"#_2-1-parse-url\",\"children\":[]},{\"level\":2,\"title\":\"2.2 parse_url_tuple\",\"slug\":\"_2-2-parse-url-tuple\",\"link\":\"#_2-2-parse-url-tuple\",\"children\":[]},{\"level\":2,\"title\":\"3.1 行转列：多行转多列\",\"slug\":\"_3-1-行转列-多行转多列\",\"link\":\"#_3-1-行转列-多行转多列\",\"children\":[{\"level\":3,\"title\":\"3.1.1 需求\",\"slug\":\"_3-1-1-需求\",\"link\":\"#_3-1-1-需求\",\"children\":[]},{\"level\":3,\"title\":\"3.1.2 实现\",\"slug\":\"_3-1-2-实现\",\"link\":\"#_3-1-2-实现\",\"children\":[]}]},{\"level\":2,\"title\":\"3.2 行转列：多行转单列\",\"slug\":\"_3-2-行转列-多行转单列\",\"link\":\"#_3-2-行转列-多行转单列\",\"children\":[{\"level\":3,\"title\":\"3.2.1 需求\",\"slug\":\"_3-2-1-需求\",\"link\":\"#_3-2-1-需求\",\"children\":[]},{\"level\":3,\"title\":\"3.2.2 实现\",\"slug\":\"_3-2-2-实现\",\"link\":\"#_3-2-2-实现\",\"children\":[]}]},{\"level\":2,\"title\":\"3.3 列转行：多列转多行\",\"slug\":\"_3-3-列转行-多列转多行\",\"link\":\"#_3-3-列转行-多列转多行\",\"children\":[{\"level\":3,\"title\":\"3.3.1 需求\",\"slug\":\"_3-3-1-需求\",\"link\":\"#_3-3-1-需求\",\"children\":[]},{\"level\":3,\"title\":\"3.3.2 实现\",\"slug\":\"_3-3-2-实现\",\"link\":\"#_3-3-2-实现\",\"children\":[]}]},{\"level\":2,\"title\":\"3.4 列转行：单列转多行\",\"slug\":\"_3-4-列转行-单列转多行\",\"link\":\"#_3-4-列转行-单列转多行\",\"children\":[{\"level\":3,\"title\":\"3.4.1 需求\",\"slug\":\"_3-4-1-需求\",\"link\":\"#_3-4-1-需求\",\"children\":[]},{\"level\":3,\"title\":\"3.4.2 实现\",\"slug\":\"_3-4-2-实现\",\"link\":\"#_3-4-2-实现\",\"children\":[]}]},{\"level\":2,\"title\":\"4.1 Hive中的Json处理方式\",\"slug\":\"_4-1-hive中的json处理方式\",\"link\":\"#_4-1-hive中的json处理方式\",\"children\":[]},{\"level\":2,\"title\":\"4.2 Json函数\",\"slug\":\"_4-2-json函数\",\"link\":\"#_4-2-json函数\",\"children\":[{\"level\":3,\"title\":\"4.2.1 get_json_object\",\"slug\":\"_4-2-1-get-json-object\",\"link\":\"#_4-2-1-get-json-object\",\"children\":[]},{\"level\":3,\"title\":\"4.2.2 json_tuple\",\"slug\":\"_4-2-2-json-tuple\",\"link\":\"#_4-2-2-json-tuple\",\"children\":[]}]},{\"level\":2,\"title\":\"4.3 Json SerDe\",\"slug\":\"_4-3-json-serde\",\"link\":\"#_4-3-json-serde\",\"children\":[]},{\"level\":2,\"title\":\"5.1 案例1：连续登录用户\",\"slug\":\"_5-1-案例1-连续登录用户\",\"link\":\"#_5-1-案例1-连续登录用户\",\"children\":[{\"level\":3,\"title\":\"5.1.1 实现\",\"slug\":\"_5-1-1-实现\",\"link\":\"#_5-1-1-实现\",\"children\":[]}]},{\"level\":2,\"title\":\"5.2 案例2：级联累加求和\",\"slug\":\"_5-2-案例2-级联累加求和\",\"link\":\"#_5-2-案例2-级联累加求和\",\"children\":[{\"level\":3,\"title\":\"5.2.1 实现\",\"slug\":\"_5-2-1-实现\",\"link\":\"#_5-2-1-实现\",\"children\":[]}]},{\"level\":2,\"title\":\"5.3 案例3：分组TopN\",\"slug\":\"_5-3-案例3-分组topn\",\"link\":\"#_5-3-案例3-分组topn\",\"children\":[{\"level\":3,\"title\":\"5.3.1 实现\",\"slug\":\"_5-3-1-实现\",\"link\":\"#_5-3-1-实现\",\"children\":[]}]},{\"level\":2,\"title\":\"6.1 实现过程\",\"slug\":\"_6-1-实现过程\",\"link\":\"#_6-1-实现过程\",\"children\":[{\"level\":3,\"title\":\"6.1.1 创建拉链表\",\"slug\":\"_6-1-1-创建拉链表\",\"link\":\"#_6-1-1-创建拉链表\",\"children\":[]},{\"level\":3,\"title\":\"6.1.2 创建增量表\",\"slug\":\"_6-1-2-创建增量表\",\"link\":\"#_6-1-2-创建增量表\",\"children\":[]},{\"level\":3,\"title\":\"6.1.3 临时表操作\",\"slug\":\"_6-1-3-临时表操作\",\"link\":\"#_6-1-3-临时表操作\",\"children\":[]},{\"level\":3,\"title\":\"6.1.4 覆盖到拉链表\",\"slug\":\"_6-1-4-覆盖到拉链表\",\"link\":\"#_6-1-4-覆盖到拉链表\",\"children\":[]}]}],\"git\":{\"createdTime\":null,\"updatedTime\":null,\"contributors\":[]},\"readingTime\":{\"minutes\":10.27,\"words\":3081},\"filePathRelative\":\"bigdata/hive/5.Hive函数重要应用案例.md\",\"excerpt\":\"<h1> 1. Hive中多字节分隔符处理</h1>\\n<blockquote>\\n<p>Hive默认序列化类是<code>LazySimpleSerDe</code>，其<strong>只支持使用单字节分隔符（char）<strong>来加载文本数据，所以遇到</strong>多字符</strong>或者<strong>数据字段中包含了分隔符</strong>，那么<code>LazySimpleSerDe</code>就不再适用了。</p>\\n</blockquote>\\n<h2> 1.1 问题和需求</h2>\\n<p>比如下面的两种情况：</p>\\n<p><strong>多字符分隔符：</strong></p>\",\"copyright\":{\"author\":\"Vingkin\"},\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
