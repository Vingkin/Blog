export const data = JSON.parse("{\"key\":\"v-4b132bf8\",\"path\":\"/designmode/Factory.html\",\"title\":\"工厂模式\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"工厂模式\",\"author\":\"Vingkin\",\"date\":\"2022-06-21T00:00:00.000Z\",\"description\":\"概述 需求：设计一个咖啡店点餐系统。 设计一个咖啡类（Coffee），并定义其两个子类（美式咖啡【AmericanCoffee】和拿铁咖啡【LatteCoffee】）；再设计一个咖啡店类（CoffeeStore），咖啡店具有点咖啡的功能。 具体类的设计如下： 在java中，万物皆对象，这些对象都需要创建，如果创建的时候直接new该对象，就会对该对象耦合严重，假如我们要更换对象，所有new对象的地方都需要修改一遍，这显然违背了软件设计的开闭原则。如果我们使用工厂来生产对象，我们就只和工厂打交道就可以了，彻底和对象解耦，如果要更换对象，直接在工厂里更换该对象即可，达到了与对象解耦的目的；所以说，工厂模式最大的优点就是：解耦。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://vingkin.github.io/Blog/Blog/designmode/Factory.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Vingkin的学习博客\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"工厂模式\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"概述 需求：设计一个咖啡店点餐系统。 设计一个咖啡类（Coffee），并定义其两个子类（美式咖啡【AmericanCoffee】和拿铁咖啡【LatteCoffee】）；再设计一个咖啡店类（CoffeeStore），咖啡店具有点咖啡的功能。 具体类的设计如下： 在java中，万物皆对象，这些对象都需要创建，如果创建的时候直接new该对象，就会对该对象耦合严重，假如我们要更换对象，所有new对象的地方都需要修改一遍，这显然违背了软件设计的开闭原则。如果我们使用工厂来生产对象，我们就只和工厂打交道就可以了，彻底和对象解耦，如果要更换对象，直接在工厂里更换该对象即可，达到了与对象解耦的目的；所以说，工厂模式最大的优点就是：解耦。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-09-25T02:33:51.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Vingkin\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2022-06-21T00:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-09-25T02:33:51.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"工厂模式\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2022-06-21T00:00:00.000Z\\\",\\\"dateModified\\\":\\\"2023-09-25T02:33:51.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Vingkin\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"概述\",\"slug\":\"概述\",\"link\":\"#概述\",\"children\":[]},{\"level\":2,\"title\":\"简单工厂模式\",\"slug\":\"简单工厂模式\",\"link\":\"#简单工厂模式\",\"children\":[{\"level\":3,\"title\":\"结构\",\"slug\":\"结构\",\"link\":\"#结构\",\"children\":[]},{\"level\":3,\"title\":\"实现\",\"slug\":\"实现\",\"link\":\"#实现\",\"children\":[]},{\"level\":3,\"title\":\"优缺点\",\"slug\":\"优缺点\",\"link\":\"#优缺点\",\"children\":[]},{\"level\":3,\"title\":\"扩展\",\"slug\":\"扩展\",\"link\":\"#扩展\",\"children\":[]}]},{\"level\":2,\"title\":\"工厂方法模式\",\"slug\":\"工厂方法模式\",\"link\":\"#工厂方法模式\",\"children\":[{\"level\":3,\"title\":\"概念\",\"slug\":\"概念\",\"link\":\"#概念\",\"children\":[]},{\"level\":3,\"title\":\"结构\",\"slug\":\"结构-1\",\"link\":\"#结构-1\",\"children\":[]},{\"level\":3,\"title\":\"实现\",\"slug\":\"实现-1\",\"link\":\"#实现-1\",\"children\":[]},{\"level\":3,\"title\":\"优缺点\",\"slug\":\"优缺点-1\",\"link\":\"#优缺点-1\",\"children\":[]}]},{\"level\":2,\"title\":\"抽象工厂模式\",\"slug\":\"抽象工厂模式\",\"link\":\"#抽象工厂模式\",\"children\":[{\"level\":3,\"title\":\"概念\",\"slug\":\"概念-1\",\"link\":\"#概念-1\",\"children\":[]},{\"level\":3,\"title\":\"结构\",\"slug\":\"结构-2\",\"link\":\"#结构-2\",\"children\":[]},{\"level\":3,\"title\":\"实现\",\"slug\":\"实现-2\",\"link\":\"#实现-2\",\"children\":[]},{\"level\":3,\"title\":\"优缺点\",\"slug\":\"优缺点-2\",\"link\":\"#优缺点-2\",\"children\":[]},{\"level\":3,\"title\":\"使用场景\",\"slug\":\"使用场景\",\"link\":\"#使用场景\",\"children\":[]}]},{\"level\":2,\"title\":\"模式扩展\",\"slug\":\"模式扩展\",\"link\":\"#模式扩展\",\"children\":[]},{\"level\":2,\"title\":\"JDK源码解析-Collection.iterator方法\",\"slug\":\"jdk源码解析-collection-iterator方法\",\"link\":\"#jdk源码解析-collection-iterator方法\",\"children\":[]}],\"git\":{\"createdTime\":1695609231000,\"updatedTime\":1695609231000,\"contributors\":[{\"name\":\"Vingkin\",\"email\":\"1830053226@qq.com\",\"commits\":1}]},\"readingTime\":{\"minutes\":10.81,\"words\":3242},\"filePathRelative\":\"designmode/Factory.md\",\"localizedDate\":\"2022年6月21日\",\"excerpt\":\"<h2> 概述</h2>\\n<p>需求：设计一个咖啡店点餐系统。</p>\\n<p>设计一个咖啡类（Coffee），并定义其两个子类（美式咖啡【AmericanCoffee】和拿铁咖啡【LatteCoffee】）；再设计一个咖啡店类（CoffeeStore），咖啡店具有点咖啡的功能。</p>\\n<p>具体类的设计如下：</p>\\n<img src=\\\"https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/interview/工厂设计模式引入.png\\\" style=\\\"zoom:80%;\\\">\\n<p>在java中，万物皆对象，这些对象都需要创建，如果创建的时候直接new该对象，就会对该对象耦合严重，假如我们要更换对象，所有new对象的地方都需要修改一遍，这显然违背了软件设计的开闭原则。如果我们使用工厂来生产对象，我们就只和工厂打交道就可以了，彻底和对象解耦，如果要更换对象，直接在工厂里更换该对象即可，达到了与对象解耦的目的；所以说，工厂模式最大的优点就是：<strong>解耦</strong>。</p>\",\"copyright\":{\"author\":\"Vingkin\"},\"autoDesc\":true}")
