export const data = JSON.parse("{\"key\":\"v-1c913b6f\",\"path\":\"/microservice/reactive/ReactiveStream.html\",\"title\":\"响应式流\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"响应式流\",\"author\":\"Vingkin\",\"date\":\"2023-08-10T00:00:00.000Z\",\"description\":\"概念 Reactive Streams为我们提供了Java中的Reactive Programming的通用API。传统异步编程的写法，不同任务分别在不同的线程中执行，协调这些线程执行的先后顺序、线程间的依赖顺序是一件非常麻烦的事情，而Reactive Streams就是为了解决该问题。Reactive Streams API中仅仅包含了如下四个接口： //发布者 public interface Publisher &lt; T &gt; { \\tpublic void subscribe（Subscriber &lt;？super T &gt; s）; } //订阅者 public interface Subscriber &lt; T &gt; { \\tpublic void onSubscribe（Subscription s）; \\tpublic void onNext（T t）; \\tpublic void onError（Throwable t）; \\tpublic void onComplete（）; } //表示Subscriber消费Publisher发布的一个消息的生命周期 public interface Subscription { \\tpublic void request(long n); \\tpublic void cancel(); } //处理器，表示一个处理阶段，它既是订阅者也是发布者，并且遵守两者的契约 public interface Processor&lt;T, R&gt; extends Subscriber&lt;T&gt;, Publisher&lt;R&gt; { \\t }\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://vingkin.github.io/Blog/new_blog/microservice/reactive/ReactiveStream.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Vingkin的学习博客\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"响应式流\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"概念 Reactive Streams为我们提供了Java中的Reactive Programming的通用API。传统异步编程的写法，不同任务分别在不同的线程中执行，协调这些线程执行的先后顺序、线程间的依赖顺序是一件非常麻烦的事情，而Reactive Streams就是为了解决该问题。Reactive Streams API中仅仅包含了如下四个接口： //发布者 public interface Publisher &lt; T &gt; { \\tpublic void subscribe（Subscriber &lt;？super T &gt; s）; } //订阅者 public interface Subscriber &lt; T &gt; { \\tpublic void onSubscribe（Subscription s）; \\tpublic void onNext（T t）; \\tpublic void onError（Throwable t）; \\tpublic void onComplete（）; } //表示Subscriber消费Publisher发布的一个消息的生命周期 public interface Subscription { \\tpublic void request(long n); \\tpublic void cancel(); } //处理器，表示一个处理阶段，它既是订阅者也是发布者，并且遵守两者的契约 public interface Processor&lt;T, R&gt; extends Subscriber&lt;T&gt;, Publisher&lt;R&gt; { \\t }\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-09-25T02:33:51.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Vingkin\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2023-08-10T00:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-09-25T02:33:51.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"响应式流\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2023-08-10T00:00:00.000Z\\\",\\\"dateModified\\\":\\\"2023-09-25T02:33:51.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Vingkin\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"概念\",\"slug\":\"概念\",\"link\":\"#概念\",\"children\":[]},{\"level\":2,\"title\":\"示例1\",\"slug\":\"示例1\",\"link\":\"#示例1\",\"children\":[]},{\"level\":2,\"title\":\"示例2\",\"slug\":\"示例2\",\"link\":\"#示例2\",\"children\":[]},{\"level\":2,\"title\":\"背压\",\"slug\":\"背压\",\"link\":\"#背压\",\"children\":[]}],\"git\":{\"createdTime\":1695609231000,\"updatedTime\":1695609231000,\"contributors\":[{\"name\":\"Vingkin\",\"email\":\"1830053226@qq.com\",\"commits\":1}]},\"readingTime\":{\"minutes\":4.33,\"words\":1300},\"filePathRelative\":\"microservice/reactive/ReactiveStream.md\",\"localizedDate\":\"2023年8月10日\",\"excerpt\":\"<h2> 概念</h2>\\n<p><code>Reactive Streams</code>为我们提供了Java中的Reactive Programming的通用API。传统异步编程的写法，不同任务分别在不同的线程中执行，协调这些线程执行的先后顺序、线程间的依赖顺序是一件非常麻烦的事情，而<code>Reactive Streams</code>就是为了解决该问题。<code>Reactive Streams API</code>中仅仅包含了如下<strong>四个接口：</strong></p>\\n<div class=\\\"language-java line-numbers-mode\\\" data-ext=\\\"java\\\"><pre class=\\\"language-java\\\"><code><span class=\\\"token comment\\\">//发布者</span>\\n<span class=\\\"token keyword\\\">public</span>  <span class=\\\"token keyword\\\">interface</span>  <span class=\\\"token class-name\\\">Publisher</span> <span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span> <span class=\\\"token class-name\\\">T</span> <span class=\\\"token punctuation\\\">&gt;</span></span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">public</span>  <span class=\\\"token keyword\\\">void</span>  subscribe（<span class=\\\"token class-name\\\">Subscriber</span> <span class=\\\"token operator\\\">&lt;</span>？<span class=\\\"token keyword\\\">super</span>  <span class=\\\"token class-name\\\">T</span> <span class=\\\"token operator\\\">&gt;</span>  s）<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">//订阅者</span>\\n<span class=\\\"token keyword\\\">public</span>  <span class=\\\"token keyword\\\">interface</span>  <span class=\\\"token class-name\\\">Subscriber</span> <span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span> <span class=\\\"token class-name\\\">T</span> <span class=\\\"token punctuation\\\">&gt;</span></span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">public</span>  <span class=\\\"token keyword\\\">void</span>  onSubscribe（<span class=\\\"token class-name\\\">Subscription</span>  s）<span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token keyword\\\">public</span>  <span class=\\\"token keyword\\\">void</span>  onNext（<span class=\\\"token class-name\\\">T</span>  t）<span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token keyword\\\">public</span>  <span class=\\\"token keyword\\\">void</span>  onError（<span class=\\\"token class-name\\\">Throwable</span>  t）<span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token keyword\\\">public</span>  <span class=\\\"token keyword\\\">void</span>  onComplete（）<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">//表示Subscriber消费Publisher发布的一个消息的生命周期</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">Subscription</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">request</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">long</span> n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\t<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">cancel</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">//处理器，表示一个处理阶段，它既是订阅者也是发布者，并且遵守两者的契约</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">Processor</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">T</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">&gt;</span></span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Subscriber</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">T</span><span class=\\\"token punctuation\\\">&gt;</span></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Publisher</span><span class=\\\"token generics\\\"><span class=\\\"token punctuation\\\">&lt;</span><span class=\\\"token class-name\\\">R</span><span class=\\\"token punctuation\\\">&gt;</span></span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\",\"copyright\":{\"author\":\"Vingkin\"},\"autoDesc\":true}")
