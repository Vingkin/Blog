export const data = JSON.parse("{\"key\":\"v-359fa3f2\",\"path\":\"/microservice/middleware/redis/RedisApp.html\",\"title\":\"Redis 实战\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"Redis 实战\",\"author\":\"Vingkin\",\"date\":\"2023-09-21T00:00:00.000Z\",\"description\":\"目录 1、短信登录 1.1、导入黑马点评项目 1.1.1 、导入SQL 1.1.2、有关当前模型 手机或者app端发起请求，请求我们的nginx服务器，nginx基于七层模型走的事HTTP协议，可以实现基于Lua直接绕开tomcat访问redis，也可以作为静态资源服务器，轻松扛下上万并发， 负载均衡到下游tomcat服务器，打散流量，我们都知道一台4核8G的tomcat，在优化和处理简单业务的加持下，大不了就处理1000左右的并发， 经过nginx的负载均衡分流后，利用集群支撑起整个项目，同时nginx在部署了前端项目后，更是可以做到动静分离，进一步降低tomcat服务的压力，这些功能都得靠nginx起作用，所以nginx是整个项目中重要的一环。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://vingkin.github.io/Blog/Blog/microservice/middleware/redis/RedisApp.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Vingkin的学习博客\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"Redis 实战\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"目录 1、短信登录 1.1、导入黑马点评项目 1.1.1 、导入SQL 1.1.2、有关当前模型 手机或者app端发起请求，请求我们的nginx服务器，nginx基于七层模型走的事HTTP协议，可以实现基于Lua直接绕开tomcat访问redis，也可以作为静态资源服务器，轻松扛下上万并发， 负载均衡到下游tomcat服务器，打散流量，我们都知道一台4核8G的tomcat，在优化和处理简单业务的加持下，大不了就处理1000左右的并发， 经过nginx的负载均衡分流后，利用集群支撑起整个项目，同时nginx在部署了前端项目后，更是可以做到动静分离，进一步降低tomcat服务的压力，这些功能都得靠nginx起作用，所以nginx是整个项目中重要的一环。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-10-08T08:47:58.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Vingkin\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2023-09-21T00:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-10-08T08:47:58.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"Redis 实战\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2023-09-21T00:00:00.000Z\\\",\\\"dateModified\\\":\\\"2023-10-08T08:47:58.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Vingkin\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"1、短信登录\",\"slug\":\"_1、短信登录\",\"link\":\"#_1、短信登录\",\"children\":[{\"level\":3,\"title\":\"1.1、导入黑马点评项目\",\"slug\":\"_1-1、导入黑马点评项目\",\"link\":\"#_1-1、导入黑马点评项目\",\"children\":[]},{\"level\":3,\"title\":\"1.2 、基于Session实现登录流程\",\"slug\":\"_1-2-、基于session实现登录流程\",\"link\":\"#_1-2-、基于session实现登录流程\",\"children\":[]},{\"level\":3,\"title\":\"1.3 、实现发送短信验证码功能\",\"slug\":\"_1-3-、实现发送短信验证码功能\",\"link\":\"#_1-3-、实现发送短信验证码功能\",\"children\":[]},{\"level\":3,\"title\":\"1.4、实现登录拦截功能\",\"slug\":\"_1-4、实现登录拦截功能\",\"link\":\"#_1-4、实现登录拦截功能\",\"children\":[]},{\"level\":3,\"title\":\"1.5、隐藏用户敏感信息\",\"slug\":\"_1-5、隐藏用户敏感信息\",\"link\":\"#_1-5、隐藏用户敏感信息\",\"children\":[]},{\"level\":3,\"title\":\"1.6、session共享问题\",\"slug\":\"_1-6、session共享问题\",\"link\":\"#_1-6、session共享问题\",\"children\":[]},{\"level\":3,\"title\":\"1.7、Redis代替session的业务流程\",\"slug\":\"_1-7、redis代替session的业务流程\",\"link\":\"#_1-7、redis代替session的业务流程\",\"children\":[]},{\"level\":3,\"title\":\"1.8、基于Redis实现短信登录\",\"slug\":\"_1-8、基于redis实现短信登录\",\"link\":\"#_1-8、基于redis实现短信登录\",\"children\":[]},{\"level\":3,\"title\":\"1.9、解决状态登录刷新问题\",\"slug\":\"_1-9、解决状态登录刷新问题\",\"link\":\"#_1-9、解决状态登录刷新问题\",\"children\":[]}]},{\"level\":2,\"title\":\"2、商户查询缓存\",\"slug\":\"_2、商户查询缓存\",\"link\":\"#_2、商户查询缓存\",\"children\":[{\"level\":3,\"title\":\"2.1、什么是缓存?\",\"slug\":\"_2-1、什么是缓存\",\"link\":\"#_2-1、什么是缓存\",\"children\":[]},{\"level\":3,\"title\":\"2.2、添加商户缓存\",\"slug\":\"_2-2、添加商户缓存\",\"link\":\"#_2-2、添加商户缓存\",\"children\":[]},{\"level\":3,\"title\":\"2.3、缓存更新策略\",\"slug\":\"_2-3、缓存更新策略\",\"link\":\"#_2-3、缓存更新策略\",\"children\":[]},{\"level\":3,\"title\":\"2.4、实现商铺和缓存与数据库双写一致\",\"slug\":\"_2-4、实现商铺和缓存与数据库双写一致\",\"link\":\"#_2-4、实现商铺和缓存与数据库双写一致\",\"children\":[]},{\"level\":3,\"title\":\"2.5、缓存穿透问题的解决思路\",\"slug\":\"_2-5、缓存穿透问题的解决思路\",\"link\":\"#_2-5、缓存穿透问题的解决思路\",\"children\":[]},{\"level\":3,\"title\":\"2.6、编码解决商品查询的缓存穿透问题：\",\"slug\":\"_2-6、编码解决商品查询的缓存穿透问题\",\"link\":\"#_2-6、编码解决商品查询的缓存穿透问题\",\"children\":[]},{\"level\":3,\"title\":\"2.7、缓存雪崩问题及解决思路\",\"slug\":\"_2-7、缓存雪崩问题及解决思路\",\"link\":\"#_2-7、缓存雪崩问题及解决思路\",\"children\":[]},{\"level\":3,\"title\":\"2.8、缓存击穿问题及解决思路\",\"slug\":\"_2-8、缓存击穿问题及解决思路\",\"link\":\"#_2-8、缓存击穿问题及解决思路\",\"children\":[]},{\"level\":3,\"title\":\"2.9、利用互斥锁解决缓存击穿问题\",\"slug\":\"_2-9、利用互斥锁解决缓存击穿问题\",\"link\":\"#_2-9、利用互斥锁解决缓存击穿问题\",\"children\":[]},{\"level\":3,\"title\":\"2.10、利用逻辑过期解决缓存击穿问题\",\"slug\":\"_2-10、利用逻辑过期解决缓存击穿问题\",\"link\":\"#_2-10、利用逻辑过期解决缓存击穿问题\",\"children\":[]},{\"level\":3,\"title\":\"2.11、封装Redis工具类\",\"slug\":\"_2-11、封装redis工具类\",\"link\":\"#_2-11、封装redis工具类\",\"children\":[]}]},{\"level\":2,\"title\":\"3、优惠卷秒杀\",\"slug\":\"_3、优惠卷秒杀\",\"link\":\"#_3、优惠卷秒杀\",\"children\":[{\"level\":3,\"title\":\"3.1、全局唯一ID\",\"slug\":\"_3-1、全局唯一id\",\"link\":\"#_3-1、全局唯一id\",\"children\":[]},{\"level\":3,\"title\":\"3.2、Redis实现全局唯一Id\",\"slug\":\"_3-2、redis实现全局唯一id\",\"link\":\"#_3-2、redis实现全局唯一id\",\"children\":[]},{\"level\":3,\"title\":\"3.3、添加优惠卷\",\"slug\":\"_3-3、添加优惠卷\",\"link\":\"#_3-3、添加优惠卷\",\"children\":[]},{\"level\":3,\"title\":\"3.4、实现秒杀下单\",\"slug\":\"_3-4、实现秒杀下单\",\"link\":\"#_3-4、实现秒杀下单\",\"children\":[]},{\"level\":3,\"title\":\"3.5、库存超卖问题分析\",\"slug\":\"_3-5、库存超卖问题分析\",\"link\":\"#_3-5、库存超卖问题分析\",\"children\":[]},{\"level\":3,\"title\":\"3.6、乐观锁解决超卖问题\",\"slug\":\"_3-6、乐观锁解决超卖问题\",\"link\":\"#_3-6、乐观锁解决超卖问题\",\"children\":[]},{\"level\":3,\"title\":\"3.7、优惠券秒杀-一人一单\",\"slug\":\"_3-7、优惠券秒杀-一人一单\",\"link\":\"#_3-7、优惠券秒杀-一人一单\",\"children\":[]},{\"level\":3,\"title\":\"3.8、集群环境下的并发问题\",\"slug\":\"_3-8、集群环境下的并发问题\",\"link\":\"#_3-8、集群环境下的并发问题\",\"children\":[]}]},{\"level\":2,\"title\":\"4、分布式锁\",\"slug\":\"_4、分布式锁\",\"link\":\"#_4、分布式锁\",\"children\":[{\"level\":3,\"title\":\"4.1、基本原理和实现方式对比\",\"slug\":\"_4-1、基本原理和实现方式对比\",\"link\":\"#_4-1、基本原理和实现方式对比\",\"children\":[]},{\"level\":3,\"title\":\"4.2、Redis分布式锁的实现核心思路\",\"slug\":\"_4-2、redis分布式锁的实现核心思路\",\"link\":\"#_4-2、redis分布式锁的实现核心思路\",\"children\":[]},{\"level\":3,\"title\":\"4.3、实现分布式锁版本一\",\"slug\":\"_4-3、实现分布式锁版本一\",\"link\":\"#_4-3、实现分布式锁版本一\",\"children\":[]},{\"level\":3,\"title\":\"4.4、Redis分布式锁误删情况说明\",\"slug\":\"_4-4、redis分布式锁误删情况说明\",\"link\":\"#_4-4、redis分布式锁误删情况说明\",\"children\":[]},{\"level\":3,\"title\":\"4.5、解决Redis分布式锁误删问题\",\"slug\":\"_4-5、解决redis分布式锁误删问题\",\"link\":\"#_4-5、解决redis分布式锁误删问题\",\"children\":[]},{\"level\":3,\"title\":\"4.6、分布式锁的原子性问题\",\"slug\":\"_4-6、分布式锁的原子性问题\",\"link\":\"#_4-6、分布式锁的原子性问题\",\"children\":[]},{\"level\":3,\"title\":\"4.7、Lua脚本解决多条命令原子性问题\",\"slug\":\"_4-7、lua脚本解决多条命令原子性问题\",\"link\":\"#_4-7、lua脚本解决多条命令原子性问题\",\"children\":[]},{\"level\":3,\"title\":\"4.8、利用Java代码调用Lua脚本改造分布式锁\",\"slug\":\"_4-8、利用java代码调用lua脚本改造分布式锁\",\"link\":\"#_4-8、利用java代码调用lua脚本改造分布式锁\",\"children\":[]}]},{\"level\":2,\"title\":\"5、分布式锁-Redisson\",\"slug\":\"_5、分布式锁-redisson\",\"link\":\"#_5、分布式锁-redisson\",\"children\":[{\"level\":3,\"title\":\"5.1、分布式锁-Redisson 功能介绍\",\"slug\":\"_5-1、分布式锁-redisson-功能介绍\",\"link\":\"#_5-1、分布式锁-redisson-功能介绍\",\"children\":[]},{\"level\":3,\"title\":\"5.2、分布式锁-Redisson 快速入门\",\"slug\":\"_5-2、分布式锁-redisson-快速入门\",\"link\":\"#_5-2、分布式锁-redisson-快速入门\",\"children\":[]},{\"level\":3,\"title\":\"5.3、分布式锁-Redisson 可重入锁原理\",\"slug\":\"_5-3、分布式锁-redisson-可重入锁原理\",\"link\":\"#_5-3、分布式锁-redisson-可重入锁原理\",\"children\":[]},{\"level\":3,\"title\":\"5.4、分布式锁-Redisson 锁重试和 WatchDog 机制\",\"slug\":\"_5-4、分布式锁-redisson-锁重试和-watchdog-机制\",\"link\":\"#_5-4、分布式锁-redisson-锁重试和-watchdog-机制\",\"children\":[]},{\"level\":3,\"title\":\"5.5、分布式锁-redission锁的MutiLock原理\",\"slug\":\"_5-5、分布式锁-redission锁的mutilock原理\",\"link\":\"#_5-5、分布式锁-redission锁的mutilock原理\",\"children\":[]}]},{\"level\":2,\"title\":\"6、秒杀优化\",\"slug\":\"_6、秒杀优化\",\"link\":\"#_6、秒杀优化\",\"children\":[{\"level\":3,\"title\":\"6.1、秒杀优化-异步秒杀思路\",\"slug\":\"_6-1、秒杀优化-异步秒杀思路\",\"link\":\"#_6-1、秒杀优化-异步秒杀思路\",\"children\":[]},{\"level\":3,\"title\":\"6.2 秒杀优化-Redis 完成秒杀资格判断\",\"slug\":\"_6-2-秒杀优化-redis-完成秒杀资格判断\",\"link\":\"#_6-2-秒杀优化-redis-完成秒杀资格判断\",\"children\":[]},{\"level\":3,\"title\":\"6.3 秒杀优化-基于阻塞队列实现秒杀优化\",\"slug\":\"_6-3-秒杀优化-基于阻塞队列实现秒杀优化\",\"link\":\"#_6-3-秒杀优化-基于阻塞队列实现秒杀优化\",\"children\":[]}]}],\"git\":{\"createdTime\":1695609231000,\"updatedTime\":1696754878000,\"contributors\":[{\"name\":\"Vingkin\",\"email\":\"1830053226@qq.com\",\"commits\":2}]},\"readingTime\":{\"minutes\":76.9,\"words\":23070},\"filePathRelative\":\"microservice/middleware/redis/RedisApp.md\",\"localizedDate\":\"2023年9月21日\",\"excerpt\":\"<p><strong>目录</strong></p>\\n\\n<!--more-->\\n<h2> 1、短信登录</h2>\\n<h3> 1.1、导入黑马点评项目</h3>\\n<h4> 1.1.1 、导入SQL</h4>\\n<figure><img src=\\\"https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/1653057872536.png\\\" alt=\\\"\\\" tabindex=\\\"0\\\" loading=\\\"lazy\\\"><figcaption></figcaption></figure>\\n<h4> 1.1.2、有关当前模型</h4>\\n<p>手机或者app端发起请求，请求我们的nginx服务器，nginx基于七层模型走的事HTTP协议，可以实现基于Lua直接绕开tomcat访问redis，也可以作为静态资源服务器，轻松扛下上万并发， 负载均衡到下游tomcat服务器，打散流量，我们都知道一台4核8G的tomcat，在优化和处理简单业务的加持下，大不了就处理1000左右的并发， 经过nginx的负载均衡分流后，利用集群支撑起整个项目，同时nginx在部署了前端项目后，更是可以做到动静分离，进一步降低tomcat服务的压力，这些功能都得靠nginx起作用，所以nginx是整个项目中重要的一环。</p>\",\"copyright\":{\"author\":\"Vingkin\"},\"autoDesc\":true}")
