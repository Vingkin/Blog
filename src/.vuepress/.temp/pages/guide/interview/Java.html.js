export const data = JSON.parse("{\"key\":\"v-6e1ae746\",\"path\":\"/guide/interview/Java.html\",\"title\":\"Java基础\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"Java基础\",\"author\":\"Vingkin\",\"date\":\"2022-04-24T00:00:00.000Z\",\"description\":\"接口和抽象类有什么共同点和区别 共同点： 都不能被实例化 都可以包含抽象方法 都可以有默认的实现方法（Java 8可以用default关键字在接口中定义默认方法） 区别： 接口主要用于对类的行为进行约束，实现了某个接口就有了相应的行为。抽象类主要用于代码复用，强调的是所属关系 一个类只能继承一个抽象类，但是能实现多个接口 接口中的成员变量只能是public static final类型的，不能被修改且必须有初始值，而抽象类的成员变量默认default，可在子类中被重新定义，也可被重新赋值。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://vingkin.github.io/Blog/Blog/guide/interview/Java.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Vingkin的学习博客\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"Java基础\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"接口和抽象类有什么共同点和区别 共同点： 都不能被实例化 都可以包含抽象方法 都可以有默认的实现方法（Java 8可以用default关键字在接口中定义默认方法） 区别： 接口主要用于对类的行为进行约束，实现了某个接口就有了相应的行为。抽象类主要用于代码复用，强调的是所属关系 一个类只能继承一个抽象类，但是能实现多个接口 接口中的成员变量只能是public static final类型的，不能被修改且必须有初始值，而抽象类的成员变量默认default，可在子类中被重新定义，也可被重新赋值。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-09-25T02:33:51.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Vingkin\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2022-04-24T00:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-09-25T02:33:51.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"Java基础\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2022-04-24T00:00:00.000Z\\\",\\\"dateModified\\\":\\\"2023-09-25T02:33:51.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Vingkin\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"接口和抽象类有什么共同点和区别\",\"slug\":\"接口和抽象类有什么共同点和区别\",\"link\":\"#接口和抽象类有什么共同点和区别\",\"children\":[]},{\"level\":2,\"title\":\"equals和hashcode\",\"slug\":\"equals和hashcode\",\"link\":\"#equals和hashcode\",\"children\":[]},{\"level\":2,\"title\":\"==与equals的区别\",\"slug\":\"与equals的区别\",\"link\":\"#与equals的区别\",\"children\":[]},{\"level\":2,\"title\":\"包装类型的常量池技术\",\"slug\":\"包装类型的常量池技术\",\"link\":\"#包装类型的常量池技术\",\"children\":[]},{\"level\":2,\"title\":\"自动装箱与自动拆箱\",\"slug\":\"自动装箱与自动拆箱\",\"link\":\"#自动装箱与自动拆箱\",\"children\":[]},{\"level\":2,\"title\":\"ArrayList和LinkedList的区别\",\"slug\":\"arraylist和linkedlist的区别\",\"link\":\"#arraylist和linkedlist的区别\",\"children\":[]},{\"level\":2,\"title\":\"ArrayList的扩容机制\",\"slug\":\"arraylist的扩容机制\",\"link\":\"#arraylist的扩容机制\",\"children\":[]},{\"level\":2,\"title\":\"List删除元素问题\",\"slug\":\"list删除元素问题\",\"link\":\"#list删除元素问题\",\"children\":[]},{\"level\":2,\"title\":\"Comparable和Comparator的区别\",\"slug\":\"comparable和comparator的区别\",\"link\":\"#comparable和comparator的区别\",\"children\":[]},{\"level\":2,\"title\":\"HashSet、LinkedHashSet和TreeSet三者的异同\",\"slug\":\"hashset、linkedhashset和treeset三者的异同\",\"link\":\"#hashset、linkedhashset和treeset三者的异同\",\"children\":[]},{\"level\":2,\"title\":\"HashMap的底层实现\",\"slug\":\"hashmap的底层实现\",\"link\":\"#hashmap的底层实现\",\"children\":[]},{\"level\":2,\"title\":\"HashMap的扩容机制\",\"slug\":\"hashmap的扩容机制\",\"link\":\"#hashmap的扩容机制\",\"children\":[]},{\"level\":2,\"title\":\"HashMap在JDK 1.7的死链问题\",\"slug\":\"hashmap在jdk-1-7的死链问题\",\"link\":\"#hashmap在jdk-1-7的死链问题\",\"children\":[]},{\"level\":2,\"title\":\"BIO，NIO，AIO\",\"slug\":\"bio-nio-aio\",\"link\":\"#bio-nio-aio\",\"children\":[{\"level\":3,\"title\":\"BIO\",\"slug\":\"bio\",\"link\":\"#bio\",\"children\":[]},{\"level\":3,\"title\":\"NIO\",\"slug\":\"nio\",\"link\":\"#nio\",\"children\":[]},{\"level\":3,\"title\":\"AIO\",\"slug\":\"aio\",\"link\":\"#aio\",\"children\":[]},{\"level\":3,\"title\":\"总结\",\"slug\":\"总结\",\"link\":\"#总结\",\"children\":[]}]}],\"git\":{\"createdTime\":1695609231000,\"updatedTime\":1695609231000,\"contributors\":[{\"name\":\"Vingkin\",\"email\":\"1830053226@qq.com\",\"commits\":1}]},\"readingTime\":{\"minutes\":11.82,\"words\":3547},\"filePathRelative\":\"guide/interview/Java.md\",\"localizedDate\":\"2022年4月24日\",\"excerpt\":\"<h2> 接口和抽象类有什么共同点和区别</h2>\\n<p>共同点：</p>\\n<ul>\\n<li>都不能被实例化</li>\\n<li>都可以包含抽象方法</li>\\n<li>都可以有默认的实现方法（Java 8可以用default关键字在接口中定义默认方法）</li>\\n</ul>\\n<p>区别：</p>\\n<ul>\\n<li>接口主要用于对类的行为进行约束，实现了某个接口就有了相应的行为。抽象类主要用于代码复用，强调的是所属关系</li>\\n<li>一个类只能继承一个抽象类，但是能实现多个接口</li>\\n<li>接口中的成员变量只能是public static final类型的，不能被修改且必须有初始值，而抽象类的成员变量默认default，可在子类中被重新定义，也可被重新赋值。</li>\\n</ul>\",\"copyright\":{\"author\":\"Vingkin\"},\"autoDesc\":true}")
