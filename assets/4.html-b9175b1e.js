import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as p,f as a,a as n,b as s}from"./app-ee96bbef.js";const o={},c=a(`<h2 id="_1-hive内置运算符" tabindex="-1"><a class="header-anchor" href="#_1-hive内置运算符" aria-hidden="true">#</a> 1. Hive内置运算符</h2><blockquote><p>关系运算符、算术运算符、逻辑运算符</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 显示所有的函数和运算符</span>
<span class="token keyword">show</span> functions<span class="token punctuation">;</span>
<span class="token comment">-- 查看运算符或者函数的使用说明</span>
<span class="token keyword">describe</span> <span class="token keyword">function</span> <span class="token operator">+</span><span class="token punctuation">;</span>
<span class="token comment">-- 使用extended 可以查看更加详细的使用说明</span>
<span class="token keyword">describe</span> <span class="token keyword">function</span> <span class="token keyword">extended</span> count<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-1-测试环境准备" tabindex="-1"><a class="header-anchor" href="#_1-1-测试环境准备" aria-hidden="true">#</a> 1.1 测试环境准备</h3><blockquote><p>创建空表dual，用于测试运算符</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 1、创建表dual</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> dual
<span class="token punctuation">(</span>
    id string
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 2、加载一个文件dual.txt到dual表中</span>
<span class="token comment">-- dual.txt只有一行内容：内容为一个空格</span>
<span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> inpath <span class="token string">&#39;/root/hivedata/dual.txt&#39;</span> <span class="token keyword">into</span> <span class="token keyword">table</span> dual<span class="token punctuation">;</span>
<span class="token comment">-- 3、在select查询语句中使用dual表完成运算符、函数功能测试</span>
<span class="token keyword">select</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-关系运算符" tabindex="-1"><a class="header-anchor" href="#_1-2-关系运算符" aria-hidden="true">#</a> 1.2 关系运算符</h3><blockquote><p>关系运算符返回的都是boolean结果</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">---------------- Hive中关系运算符 -------------------------</span>
<span class="token comment">-- is null空值判断</span>
<span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> dual
<span class="token keyword">where</span> <span class="token string">&#39;vingkin&#39;</span> <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span>

<span class="token comment">-- is not null 非空值判断</span>
<span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> dual
<span class="token keyword">where</span> <span class="token string">&#39;vingkin&#39;</span> <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span>

<span class="token comment">-- like比较： _表示任意单个字符 %表示任意数量字符</span>
<span class="token comment">-- 否定比较： NOT A like B</span>
<span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> dual
<span class="token keyword">where</span> <span class="token string">&#39;vingkin&#39;</span> <span class="token operator">like</span> <span class="token string">&#39;it_&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> dual
<span class="token keyword">where</span> <span class="token string">&#39;vingkin&#39;</span> <span class="token operator">like</span> <span class="token string">&#39;it%&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> dual
<span class="token keyword">where</span> <span class="token string">&#39;vingkin&#39;</span> <span class="token operator">not</span> <span class="token operator">like</span> <span class="token string">&#39;hadoo_&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> dual
<span class="token keyword">where</span> <span class="token operator">not</span> <span class="token string">&#39;vingkin&#39;</span> <span class="token operator">like</span> <span class="token string">&#39;hadoo_&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- rlike：确定字符串是否匹配正则表达式，是REGEXP_LIKE()的同义词。</span>
<span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> dual
<span class="token keyword">where</span> <span class="token string">&#39;vingkin&#39;</span> <span class="token operator">rlike</span> <span class="token string">&#39;^i.*t$&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> dual
<span class="token keyword">where</span> <span class="token string">&#39;123456&#39;</span> <span class="token operator">rlike</span> <span class="token string">&#39;^\\\\d+$&#39;</span><span class="token punctuation">;</span> <span class="token comment">-- 判断是否全为数字</span>

<span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> dual
<span class="token keyword">where</span> <span class="token string">&#39;123456aa&#39;</span> <span class="token operator">rlike</span> <span class="token string">&#39;^\\\\d+$&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- regexp：功能与rlike相同 用于判断字符串是否匹配正则表达式</span>
<span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> dual
<span class="token keyword">where</span> <span class="token string">&#39;vingkin&#39;</span> <span class="token operator">regexp</span> <span class="token string">&#39;^i.*t$&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-算术运算符" tabindex="-1"><a class="header-anchor" href="#_1-3-算术运算符" aria-hidden="true">#</a> 1.3 算术运算符</h3><blockquote><p>算术运算符操作数必须是数值类型。 分为一元运算符和二元运算符：一元运算符,只有一个操作数; 二元运算符有两个操作数,运算符在两个操作数之间。</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-------------------Hive中算术运算符---------------------------------</span>
<span class="token comment">-- 取整操作: div  给出将A除以B所得的整数部分。例如17 div 3得出5。</span>
<span class="token keyword">select</span> <span class="token number">17</span> <span class="token operator">div</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token comment">-- 取余操作: %  也叫做取模mod  A除以B所得的余数部分</span>
<span class="token keyword">select</span> <span class="token number">17</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token comment">-- 位与操作: &amp;  A和B按位进行与操作的结果。 与表示两个都为1则结果为1</span>
<span class="token keyword">select</span> <span class="token number">4</span> <span class="token operator">&amp;</span> <span class="token number">8</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span> 

<span class="token keyword">select</span> <span class="token number">6</span> <span class="token operator">&amp;</span> <span class="token number">4</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>

<span class="token comment">-- 位或操作: |  A和B按位进行或操作的结果  或表示有一个为1则结果为1</span>
<span class="token keyword">select</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">8</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token number">6</span> <span class="token operator">|</span> <span class="token number">4</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>

<span class="token comment">-- 位异或操作: ^ A和B按位进行异或操作的结果 异或表示两者的值不同,则结果为1</span>
<span class="token keyword">select</span> <span class="token number">4</span> <span class="token operator">^</span> <span class="token number">8</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token number">6</span> <span class="token operator">^</span> <span class="token number">4</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_1-4-逻辑运算符" aria-hidden="true">#</a> 1.4 逻辑运算符</h3><p>逻辑是否存在: <code>[NOT] EXISTS (subquery)</code></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 3、Hive逻辑运算符</span>
<span class="token comment">-- 与操作: A AND B   如果A和B均为TRUE，则为TRUE，否则为FALSE。如果A或B为NULL，则为NULL。</span>
<span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> dual
<span class="token keyword">where</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">and</span> <span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">-- 或操作: A OR B   如果A或B或两者均为TRUE，则为TRUE，否则为FALSE。</span>
<span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> dual
<span class="token keyword">where</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">or</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token comment">-- 非操作: NOT A 、!A   如果A为FALSE，则为TRUE；如果A为NULL，则为NULL。否则为FALSE。</span>
<span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> dual
<span class="token keyword">where</span> <span class="token operator">not</span> <span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> dual
<span class="token keyword">where</span> <span class="token operator">!</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token comment">-- 在:A IN (val1, val2, ...)  如果A等于任何值，则为TRUE。</span>
<span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> dual
<span class="token keyword">where</span> <span class="token number">11</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 不在:A NOT IN (val1, val2, ...) 如果A不等于任何值，则为TRUE</span>
<span class="token keyword">select</span> <span class="token number">1</span> <span class="token keyword">from</span> dual
<span class="token keyword">where</span> <span class="token number">11</span> <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 逻辑是否存在: [NOT] EXISTS (subquery)</span>
<span class="token comment">-- 将主查询的数据，放到子查询中做条件验证，根据验证结果（TRUE 或 FALSE）来决定主查询的数据结果是否得以保留。</span>
<span class="token keyword">select</span> A<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> A
<span class="token keyword">where</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> B<span class="token punctuation">.</span>id <span class="token keyword">from</span> B <span class="token keyword">where</span> A<span class="token punctuation">.</span>id <span class="token operator">=</span> B<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-hive-函数入门" tabindex="-1"><a class="header-anchor" href="#_2-hive-函数入门" aria-hidden="true">#</a> 2. Hive 函数入门</h2><h3 id="_2-1-hive函数概述及分类标准" tabindex="-1"><a class="header-anchor" href="#_2-1-hive函数概述及分类标准" aria-hidden="true">#</a> 2.1 Hive函数概述及分类标准</h3><p>Hive函数可以分成两大类：</p><ul><li>内置函数（Built-in Functions）</li><li>用户定义函数（UDF User-Defined Functions）</li></ul><p>其中用户定义可以分成三类：</p><ul><li>UDF（User-Defined-Function）：普通函数，一进一出</li><li>UDAF（User-Defined Aggregation Function）：聚合函数，多进一出</li><li>UDTF（User-Defined Table-Generating Function）：表生成函数，一进多出</li></ul><p><strong>但是由于UDF分类标准扩大化，UDF分类标准可以扩大到Hive的所有函数中：包括内置函数和用户自定义函数。所以现在没有内置函数和用户定义函数之分，所有函数可以分成UDF，UDAF，UDTF三类。</strong></p><h3 id="_2-2-hive内置函数" tabindex="-1"><a class="header-anchor" href="#_2-2-hive内置函数" aria-hidden="true">#</a> 2.2 Hive内置函数</h3><h4 id="_2-2-1-字符串函数" tabindex="-1"><a class="header-anchor" href="#_2-2-1-字符串函数" aria-hidden="true">#</a> 2.2.1 字符串函数</h4><table><thead><tr><th>函数名</th><th>函数作用</th></tr></thead><tbody><tr><td>length</td><td>字符串长度函数</td></tr><tr><td>reverse</td><td>字符串反转函数</td></tr><tr><td>concat</td><td>字符串连接函数</td></tr><tr><td>concat_ws</td><td>带分隔符字符串连接函数</td></tr><tr><td>substr，substring</td><td>字符串截取函数</td></tr><tr><td>upper，ucase</td><td>字符串转大写函数</td></tr><tr><td>lower，lcase</td><td>字符串转小写函数</td></tr><tr><td>trim</td><td>去空格函数</td></tr><tr><td>ltrim</td><td>左边去空格函数</td></tr><tr><td>rtrim</td><td>右边去空格函数</td></tr><tr><td>regexp_replace</td><td>正则表达式替换函数</td></tr><tr><td>regexp_extract</td><td>正则表达式解析函数</td></tr><tr><td>parse_url</td><td>URL解析函数</td></tr><tr><td>get_json_object</td><td>json解析函数</td></tr><tr><td>space</td><td>空格字符串函数</td></tr><tr><td>repeat</td><td>重复字符串函数</td></tr><tr><td>ascii</td><td>首字符ascii函数</td></tr><tr><td>lpad</td><td>左补足函数</td></tr><tr><td>rpad</td><td>右补足函数</td></tr><tr><td>split</td><td>分隔字符串函数</td></tr><tr><td>find_in_set</td><td>集合查找函数</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">------------ String Functions 字符串函数 ------------</span>
<span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">&quot;angela&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;baby&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 带分隔符字符串连接函数：concat_ws(separator, [string | array(string)]+)</span>
<span class="token keyword">select</span> concat_ws<span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;www&#39;</span><span class="token punctuation">,</span> array<span class="token punctuation">(</span><span class="token string">&#39;vingkin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 字符串截取函数：substr(str, pos[, len]) 或者  substring(str, pos[, len])</span>
<span class="token keyword">select</span> substr<span class="token punctuation">(</span><span class="token string">&quot;angelababy&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- pos是从1开始的索引，如果为负数则倒着数</span>
<span class="token keyword">select</span> substr<span class="token punctuation">(</span><span class="token string">&quot;angelababy&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 正则表达式替换函数：regexp_replace(str, regexp, rep)</span>
<span class="token keyword">select</span> regexp_replace<span class="token punctuation">(</span><span class="token string">&#39;100-200&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;(\\\\d+)&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;num&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 正则表达式解析函数：regexp_extract(str, regexp[, idx]) 提取正则匹配到的指定组内容</span>
<span class="token keyword">select</span> regexp_extract<span class="token punctuation">(</span><span class="token string">&#39;100-200&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;(\\\\d+)-(\\\\d+)&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- URL解析函数：parse_url 注意要想一次解析出多个 可以使用parse_url_tuple这个UDTF函数</span>
<span class="token keyword">select</span> parse_url<span class="token punctuation">(</span><span class="token string">&#39;http://www.vingkin.cn/path/p1.php?query=1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;HOST&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 分割字符串函数: split(str, regex)</span>
<span class="token keyword">select</span> split<span class="token punctuation">(</span><span class="token string">&#39;apache hive&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\\\\s+&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- \\\\s+表示用来匹配空白符，一个或多个都行</span>

<span class="token comment">-- json解析函数：get_json_object(json_txt, path)</span>
<span class="token comment">-- $表示json对象</span>
<span class="token keyword">select</span> get_json_object<span class="token punctuation">(</span>
               <span class="token string">&#39;[{&quot;website&quot;:&quot;www.vingkin.cn&quot;,&quot;name&quot;:&quot;allenwoon&quot;}, {&quot;website&quot;:&quot;cloud.vingkin.com&quot;,&quot;name&quot;:&quot;carbondata 中文文档&quot;}]&#39;</span><span class="token punctuation">,</span>
               <span class="token string">&#39;$.[1].website&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">-- 字符串长度函数：length(str | binary)</span>
<span class="token keyword">select</span> length<span class="token punctuation">(</span><span class="token string">&quot;angelababy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 字符串反转函数：reverse</span>
<span class="token keyword">select</span> reverse<span class="token punctuation">(</span><span class="token string">&quot;angelababy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 字符串连接函数：concat(str1, str2, ... strN)</span>
<span class="token comment">-- 字符串转大写函数：upper,ucase</span>
<span class="token keyword">select</span> upper<span class="token punctuation">(</span><span class="token string">&quot;angelababy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token function">ucase</span><span class="token punctuation">(</span><span class="token string">&quot;angelababy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 字符串转小写函数：lower,lcase</span>
<span class="token keyword">select</span> lower<span class="token punctuation">(</span><span class="token string">&quot;ANGELABABY&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token function">lcase</span><span class="token punctuation">(</span><span class="token string">&quot;ANGELABABY&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 去空格函数：trim 去除左右两边的空格</span>
<span class="token keyword">select</span> trim<span class="token punctuation">(</span><span class="token string">&quot; angelababy &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 左边去空格函数：ltrim</span>
<span class="token keyword">select</span> ltrim<span class="token punctuation">(</span><span class="token string">&quot; angelababy &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 右边去空格函数：rtrim</span>
<span class="token keyword">select</span> rtrim<span class="token punctuation">(</span><span class="token string">&quot; angelababy &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 空格字符串函数：space(n) 返回指定个数空格</span>
<span class="token keyword">select</span> space<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 重复字符串函数：repeat(str, n) 重复str字符串n次</span>
<span class="token keyword">select</span> <span class="token keyword">repeat</span><span class="token punctuation">(</span><span class="token string">&quot;angela&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 首字符ascii函数：ascii</span>
<span class="token keyword">select</span> ascii<span class="token punctuation">(</span><span class="token string">&quot;angela&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- a对应ASCII 97</span>

<span class="token comment">-- 左补足函数：lpad</span>
<span class="token keyword">select</span> lpad<span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;??&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- ???hi</span>
<span class="token keyword">select</span> lpad<span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;??&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- h</span>

<span class="token comment">-- 右补足函数：rpad</span>
<span class="token keyword">select</span> rpad<span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;??&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">--集合查找函数: find_in_set(str,str_array)</span>
<span class="token keyword">select</span> find_in_set<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;abc,b,ab,c,def&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 0，表示没找到</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-2-日期函数" tabindex="-1"><a class="header-anchor" href="#_2-2-2-日期函数" aria-hidden="true">#</a> 2.2.2 日期函数</h4><table><thead><tr><th>函数名</th><th>函数作用</th></tr></thead><tbody><tr><td>获取当前日期</td><td>current_date</td></tr><tr><td>获取当前时间戳</td><td>current_timestamp</td></tr><tr><td>UNIX时间戳转日期函数</td><td>from_unixtime</td></tr><tr><td>获取当前UNIX时间戳函数</td><td>unix_timestamp</td></tr><tr><td>日期转UNIX时间戳函数</td><td>unix_timestamp</td></tr><tr><td>抽取日期函数</td><td>to_date</td></tr><tr><td>日期转年函数</td><td>year</td></tr><tr><td>...</td><td>month</td></tr><tr><td>...</td><td>day</td></tr><tr><td>...</td><td>hour</td></tr><tr><td>...</td><td>minute</td></tr><tr><td>...</td><td>second</td></tr><tr><td>日期转周函数</td><td>weekofyear</td></tr><tr><td>日期比较函数</td><td>datediff</td></tr><tr><td>日期增加函数</td><td>date_add</td></tr><tr><td>日期减少函数</td><td>date_sub</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">----------- Date Functions 日期函数 -----------------</span>
<span class="token comment">-- 获取当前日期: current_date</span>
<span class="token keyword">select</span> <span class="token keyword">current_date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 获取当前时间戳: current_timestamp</span>
<span class="token comment">-- 同一查询中对current_timestamp的所有调用均返回相同的值。</span>
<span class="token keyword">select</span> <span class="token keyword">current_timestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 2021-09-06 01:18:22.871000000</span>

<span class="token comment">-- 获取当前UNIX时间戳函数: unix_timestamp</span>
<span class="token keyword">select</span> unix_timestamp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 1630916306</span>
<span class="token comment">-- 日期转UNIX时间戳函数: unix_timestamp</span>
<span class="token keyword">select</span> unix_timestamp<span class="token punctuation">(</span><span class="token string">&quot;2011-12-07 13:01:03&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 指定格式日期转UNIX时间戳函数: unix_timestamp</span>
<span class="token keyword">select</span> unix_timestamp<span class="token punctuation">(</span><span class="token string">&#39;20111207 13:01:03&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;yyyyMMdd HH:mm:ss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- UNIX时间戳转日期函数: from_unixtime</span>
<span class="token keyword">select</span> from_unixtime<span class="token punctuation">(</span><span class="token number">1618238391</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> from_unixtime<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;yyyy-MM-dd HH:mm:ss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 日期比较函数: datediff  日期格式要求&#39;yyyy-MM-dd HH:mm:ss&#39; or &#39;yyyy-MM-dd&#39;</span>
<span class="token keyword">select</span> datediff<span class="token punctuation">(</span><span class="token string">&#39;2012-12-08&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2012-05-09&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 日期增加函数: date_add</span>
<span class="token keyword">select</span> date_add<span class="token punctuation">(</span><span class="token string">&#39;2012-02-28&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 日期减少函数: date_sub</span>
<span class="token keyword">select</span> date_sub<span class="token punctuation">(</span><span class="token string">&#39;2012-01-1&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 抽取日期函数: to_date</span>
<span class="token keyword">select</span> to_date<span class="token punctuation">(</span><span class="token string">&#39;2009-07-30 04:17:52&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 日期转年函数: year</span>
<span class="token keyword">select</span> <span class="token keyword">year</span><span class="token punctuation">(</span><span class="token string">&#39;2009-07-30 04:17:52&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 日期转月函数: month</span>
<span class="token keyword">select</span> <span class="token keyword">month</span><span class="token punctuation">(</span><span class="token string">&#39;2009-07-30 04:17:52&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 日期转天函数: day</span>
<span class="token keyword">select</span> <span class="token keyword">day</span><span class="token punctuation">(</span><span class="token string">&#39;2009-07-30 04:17:52&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 日期转小时函数: hour</span>
<span class="token keyword">select</span> <span class="token keyword">hour</span><span class="token punctuation">(</span><span class="token string">&#39;2009-07-30 04:17:52&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 日期转分钟函数: minute</span>
<span class="token keyword">select</span> <span class="token keyword">minute</span><span class="token punctuation">(</span><span class="token string">&#39;2009-07-30 04:17:52&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 日期转秒函数: second</span>
<span class="token keyword">select</span> <span class="token keyword">second</span><span class="token punctuation">(</span><span class="token string">&#39;2009-07-30 04:17:52&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 日期转周函数: weekofyear 返回指定日期所示年份第几周</span>
<span class="token keyword">select</span> weekofyear<span class="token punctuation">(</span><span class="token string">&#39;2009-07-30 04:17:52&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-3-数学函数" tabindex="-1"><a class="header-anchor" href="#_2-2-3-数学函数" aria-hidden="true">#</a> 2.2.3 数学函数</h4><table><thead><tr><th>函数名</th><th>函数功能</th></tr></thead><tbody><tr><td>round</td><td>四舍五入</td></tr><tr><td>round</td><td>指定精度取整函数</td></tr><tr><td>floor</td><td>向下取整函数</td></tr><tr><td>ceil</td><td>向上取整函数</td></tr><tr><td>rand</td><td>取随机数函数</td></tr><tr><td>bin</td><td>二进制函数</td></tr><tr><td>conv</td><td>进制转换函数</td></tr><tr><td>abs</td><td>绝对值函数</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">----Mathematical Functions 数学函数-------------</span>
<span class="token comment">-- 取整函数: round  返回double类型的整数值部分 （遵循四舍五入）</span>
<span class="token keyword">select</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 指定精度取整函数: round(double a, int d) 返回指定精度d的double类型</span>
<span class="token keyword">select</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 向下取整函数: floor</span>
<span class="token keyword">select</span> floor<span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> floor<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.1415926</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 向上取整函数: ceil</span>
<span class="token keyword">select</span> ceil<span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> ceil<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.1415926</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 取随机数函数: rand 每次执行都不一样 返回一个0到1范围内的随机数</span>
<span class="token keyword">select</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">-- 指定种子取随机数函数: rand(int seed) 得到一个稳定的随机数序列</span>
<span class="token keyword">select</span> rand<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 二进制函数:  bin(BIGINT a)</span>
<span class="token keyword">select</span> bin<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 进制转换函数: conv(BIGINT num, int from_base, int to_base)</span>
<span class="token keyword">select</span> conv<span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 绝对值函数: abs</span>
<span class="token keyword">select</span> abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-4-集合函数" tabindex="-1"><a class="header-anchor" href="#_2-2-4-集合函数" aria-hidden="true">#</a> 2.2.4 集合函数</h4><table><thead><tr><th>函数名</th><th>函数功能</th></tr></thead><tbody><tr><td>size()</td><td>集合元素个数函数</td></tr><tr><td>map_keys()</td><td>取map集合keys函数</td></tr><tr><td>map_values()</td><td>取map集合values函数</td></tr><tr><td>array_contains()</td><td>判断数组是否包含指定元素</td></tr><tr><td>sort_array()</td><td>数组排序函数</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-------Collection Functions 集合函数--------------</span>
<span class="token comment">-- 集合元素size函数: size(Map&lt;K.V&gt;) size(Array&lt;T&gt;)</span>
<span class="token keyword">select</span> size<span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>array<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> size<span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>map<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token number">10086</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">\`</span>array<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">\`</span>map<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token number">10086</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>

<span class="token comment">-- 取map集合keys函数: map_keys(Map&lt;K.V&gt;)</span>
<span class="token keyword">select</span> map_keys<span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>map<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token number">10086</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 取map集合values函数: map_values(Map&lt;K.V&gt;)</span>
<span class="token keyword">select</span> map_values<span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>map<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token number">10086</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 判断数组是否包含指定元素: array_contains(Array&lt;T&gt;, value)</span>
<span class="token keyword">select</span> array_contains<span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>array<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> array_contains<span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>array<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 数组排序函数:sort_array(Array&lt;T&gt;)</span>
<span class="token keyword">select</span> sort_array<span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>array<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-5-条件函数" tabindex="-1"><a class="header-anchor" href="#_2-2-5-条件函数" aria-hidden="true">#</a> 2.2.5 条件函数</h4><table><thead><tr><th>函数名</th><th>函数功能</th></tr></thead><tbody><tr><td>if()</td><td>if条件判断</td></tr><tr><td>isnull()</td><td>空判断函数</td></tr><tr><td>isnotnull()</td><td>非空判断函数</td></tr><tr><td>nvl()</td><td>空值转换函数</td></tr><tr><td>coalesce</td><td>非空查找函数</td></tr><tr><td>case a when b then c [when * then * ... else *] end</td><td>条件转换函数</td></tr><tr><td>nullif(a, b)</td><td>a=b返回NULL，否则返回a</td></tr><tr><td>assert_true(condition)</td><td>condition为false报错，否则返回NULL</td></tr></tbody></table><p>使用之前课程创建好的student表数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>
    num <span class="token keyword">int</span><span class="token punctuation">,</span>
    name string<span class="token punctuation">,</span>
    sex string<span class="token punctuation">,</span>
    age <span class="token keyword">int</span><span class="token punctuation">,</span>
    dept string
<span class="token punctuation">)</span> <span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> inpath <span class="token string">&#39;/root/hivedata/students.txt&#39;</span> <span class="token keyword">into</span> <span class="token keyword">table</span> student<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- if条件判断: if(boolean testCondition, T valueTrue, T valueFalseOrNull)</span>
<span class="token keyword">select</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 200</span>
<span class="token keyword">select</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sex <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;M&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;W&#39;</span><span class="token punctuation">)</span> 
<span class="token keyword">from</span> student <span class="token keyword">limit</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token comment">-- 空判断函数: isnull( a )</span>
<span class="token keyword">select</span> isnull<span class="token punctuation">(</span><span class="token string">&quot;allen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> isnull<span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 非空判断函数: isnotnull ( a )</span>
<span class="token keyword">select</span> isnotnull<span class="token punctuation">(</span><span class="token string">&quot;allen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> isnotnull<span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 空值转换函数: nvl(T value, T default_value)</span>
<span class="token keyword">select</span> nvl<span class="token punctuation">(</span><span class="token string">&quot;allen&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;vingkin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> nvl<span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">&quot;vingkin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 非空查找函数: COALESCE(T v1, T v2, ...)</span>
<span class="token comment">-- 返回参数中的第一个非空值；如果所有值都为NULL，那么返回NULL</span>
<span class="token keyword">select</span> <span class="token keyword">COALESCE</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token keyword">COALESCE</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token keyword">COALESCE</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 条件转换函数: CASE a WHEN b THEN c [WHEN d THEN e]* [ELSE f] END</span>
<span class="token keyword">select</span> <span class="token keyword">case</span> <span class="token number">100</span> <span class="token keyword">when</span> <span class="token number">50</span> <span class="token keyword">then</span> <span class="token string">&#39;tom&#39;</span> <span class="token keyword">when</span> <span class="token number">100</span> <span class="token keyword">then</span> <span class="token string">&#39;mary&#39;</span> <span class="token keyword">else</span> <span class="token string">&#39;tim&#39;</span> <span class="token keyword">end</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token keyword">case</span> sex <span class="token keyword">when</span> <span class="token string">&#39;男&#39;</span> <span class="token keyword">then</span> <span class="token string">&#39;male&#39;</span> <span class="token keyword">else</span> <span class="token string">&#39;female&#39;</span> <span class="token keyword">end</span>
<span class="token keyword">from</span> student <span class="token keyword">limit</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token comment">-- nullif( a, b ):</span>
<span class="token comment">-- 如果a = b，则返回NULL，否则返回第一个</span>
<span class="token keyword">select</span> <span class="token keyword">nullif</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token keyword">nullif</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- assert_true(condition)</span>
<span class="token comment">-- 如果&#39;condition&#39;不为真，则引发异常，否则返回null</span>
<span class="token keyword">SELECT</span> assert_true<span class="token punctuation">(</span><span class="token number">11</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> assert_true<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-6-类型转换函数" tabindex="-1"><a class="header-anchor" href="#_2-2-6-类型转换函数" aria-hidden="true">#</a> 2.2.6 类型转换函数</h4><blockquote><p>主要用于显式数据类型转换</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">----Type Conversion Functions 类型转换函数-----------------</span>
<span class="token comment">-- 任意数据类型之间转换:cast</span>
<span class="token keyword">select</span> cast<span class="token punctuation">(</span><span class="token number">12.14</span> <span class="token keyword">as</span> <span class="token keyword">bigint</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> cast<span class="token punctuation">(</span><span class="token number">12.14</span> <span class="token keyword">as</span> string<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> cast<span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span> <span class="token keyword">as</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-7-数据脱敏函数" tabindex="-1"><a class="header-anchor" href="#_2-2-7-数据脱敏函数" aria-hidden="true">#</a> 2.2.7 数据脱敏函数</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">----Data Masking Functions 数据脱敏函数------------</span>
<span class="token comment">-- mask</span>
<span class="token comment">-- 将查询回的数据，大写字母转换为X，小写字母转换为x，数字转换为n。</span>
<span class="token keyword">select</span> mask<span class="token punctuation">(</span><span class="token string">&quot;abc123DEF&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> mask<span class="token punctuation">(</span><span class="token string">&quot;abc123DEF&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;^&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 自定义替换的字母</span>

<span class="token comment">-- mask_first_n(string str[, int n]</span>
<span class="token comment">-- 对前n个进行脱敏替换</span>
<span class="token keyword">select</span> mask_first_n<span class="token punctuation">(</span><span class="token string">&quot;abc123DEF&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- mask_last_n(string str[, int n])</span>
<span class="token keyword">select</span> mask_last_n<span class="token punctuation">(</span><span class="token string">&quot;abc123DEF&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- mask_show_first_n(string str[, int n])</span>
<span class="token comment">-- 除了前n个字符，其余进行掩码处理</span>
<span class="token keyword">select</span> mask_show_first_n<span class="token punctuation">(</span><span class="token string">&quot;abc123DEF&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- mask_show_last_n(string str[, int n])</span>
<span class="token keyword">select</span> mask_show_last_n<span class="token punctuation">(</span><span class="token string">&quot;abc123DEF&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- mask_hash(string|char|varchar str)</span>
<span class="token comment">-- 返回字符串的hash编码。</span>
<span class="token keyword">select</span> mask_hash<span class="token punctuation">(</span><span class="token string">&quot;abc123DEF&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-8-其他杂项函数" tabindex="-1"><a class="header-anchor" href="#_2-2-8-其他杂项函数" aria-hidden="true">#</a> 2.2.8 其他杂项函数</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">----- Misc. Functions 其他杂项函数---------------</span>
<span class="token comment">-- 如果你要调用的java方法所在的jar包不是hive自带的 可以使用add jar添加进来</span>
<span class="token comment">-- hive调用java方法: java_method(class, method[, arg1[, arg2..]])</span>
<span class="token keyword">select</span> java_method<span class="token punctuation">(</span><span class="token string">&quot;java.lang.Math&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;max&quot;</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 反射函数: reflect(class, method[, arg1[, arg2..]])</span>
<span class="token keyword">select</span> reflect<span class="token punctuation">(</span><span class="token string">&quot;java.lang.Math&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;max&quot;</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 取哈希值函数:hash</span>
<span class="token keyword">select</span> <span class="token keyword">hash</span><span class="token punctuation">(</span><span class="token string">&quot;allen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- current_user()、logged_in_user()、current_database()、version()</span>

<span class="token comment">-- SHA-1加密: sha1(string/binary)</span>
<span class="token keyword">select</span> sha1<span class="token punctuation">(</span><span class="token string">&quot;allen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- SHA-2家族算法加密：sha2(string/binary, int)  (SHA-224, SHA-256, SHA-384, SHA-512)</span>
<span class="token keyword">select</span> sha2<span class="token punctuation">(</span><span class="token string">&quot;allen&quot;</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> sha2<span class="token punctuation">(</span><span class="token string">&quot;allen&quot;</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- crc32加密:</span>
<span class="token keyword">select</span> crc32<span class="token punctuation">(</span><span class="token string">&quot;allen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- MD5加密: md5(string/binary)</span>
<span class="token keyword">select</span> md5<span class="token punctuation">(</span><span class="token string">&quot;allen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-案例-udf实现手机号加密" tabindex="-1"><a class="header-anchor" href="#_2-3-案例-udf实现手机号加密" aria-hidden="true">#</a> 2.3 案例：UDF实现手机号加密</h3><blockquote><p>在企业中处理数据的时候，对于敏感数据往往需要进行脱敏处理。比如手机号。我们常见的处理方式是将手机号中间4位进行****处理。</p></blockquote><p>需求：</p><ol><li>能够对输入数据进行非空判断、手机号位数判断</li><li>能够实现校验手机号格式，把满足规则的进行****处理</li><li>对于不符合手机号规则的数据直接返回，不处理</li></ol><p>实现步骤：</p><ol><li>写一个java类，继承UDF，并重载evaluate方法，方法中实现函数的业务逻辑；</li><li>重载意味着可以在一个java类中实现多个函数功能；</li><li>程序打成jar包，上传HS2服务器本地或者HDFS;</li><li>客户端命令行中添加jar包到Hive的classpath： hive&gt;add JAR xxx.jar;</li><li>注册成为临时函数（给UDF命名）：<code>create temporary function encrypt_phonum as &#39;com.vingkin.hive.udf.PhoneNumberUDF&#39;</code>;</li><li>HQL中使用函数:<code>select encrypt_phonum(&#39;13888888888&#39;)</code></li></ol><p>相关依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.hive<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hive-exec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hadoop-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-shade-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">&gt;</span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>shade<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filters</span><span class="token punctuation">&gt;</span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>
                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifact</span><span class="token punctuation">&gt;</span></span>*:*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifact</span><span class="token punctuation">&gt;</span></span>
                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">&gt;</span></span>
                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">&gt;</span></span>META-INF/*.SF<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">&gt;</span></span>
                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">&gt;</span></span>META-INF/*.DSA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">&gt;</span></span>
                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">&gt;</span></span>META-INF/*.RSA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">&gt;</span></span>
                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">&gt;</span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filters</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>业务代码：PhoneNumberUDF.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneNumberUDF</span> <span class="token keyword">extends</span> <span class="token class-name">UDF</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token class-name">String</span> phoNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> encryptPhoNum <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>phoNum<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> phoNum<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;^(1[3-9]\\\\d{9}$)&quot;</span><span class="token punctuation">;</span>
            <span class="token class-name">Pattern</span> p <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Matcher</span> m <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>phoNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                encryptPhoNum <span class="token operator">=</span> phoNum<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;(\\\\d{3})\\\\d{4}(\\\\d{4})&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;$1****$2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                encryptPhoNum <span class="token operator">=</span> phoNum<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            encryptPhoNum <span class="token operator">=</span> phoNum<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> encryptPhoNum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// public static void main(String[] args) {</span>
    <span class="token comment">//     System.out.println(new PhoneNumberUDF().evaluate(&quot;13888888888&quot;));</span>
    <span class="token comment">// }</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-hive-函数高阶" tabindex="-1"><a class="header-anchor" href="#_3-hive-函数高阶" aria-hidden="true">#</a> 3. Hive 函数高阶</h2><h3 id="_3-1-udtf之explode函数" tabindex="-1"><a class="header-anchor" href="#_3-1-udtf之explode函数" aria-hidden="true">#</a> 3.1 UDTF之explode函数</h3><blockquote><p>explode接收map、array类型的数据作为输入，然后把输入数据中的每个元素拆开变成一行数据，一个元素一行。</p><p>对于map每行有两列分别为key，value</p></blockquote><h4 id="_3-1-1-示例" tabindex="-1"><a class="header-anchor" href="#_3-1-1-示例" aria-hidden="true">#</a> 3.1.1 示例</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> explode<span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>array<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> item<span class="token punctuation">;</span>
<span class="token keyword">select</span> explode<span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>map<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span><span class="token number">10086</span><span class="token punctuation">,</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251623577.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_3-1-2-案例-nba总冠军球队名单分析" tabindex="-1"><a class="header-anchor" href="#_3-1-2-案例-nba总冠军球队名单分析" aria-hidden="true">#</a> 3.1.2 案例：NBA总冠军球队名单分析</h4><blockquote><p>有一份数据The_NBA_Championship.txt，关于部分年份的NBA总冠军球队名单；第一个字段表示球队名称，第二个字段是获取总冠军的年份；字段之间以，分割；总冠军年份之间以|进行分割。</p></blockquote><figure><img src="https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251623420.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>建表加载数据：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- step1:建表</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> the_nba_championship<span class="token punctuation">(</span>
           team_name string<span class="token punctuation">,</span>
           champion_year array<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span>
<span class="token punctuation">)</span> <span class="token keyword">row</span> format delimited
<span class="token keyword">fields</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">&#39;,&#39;</span>
collection items <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">&#39;|&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- step2:加载数据文件到表中</span>
<span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> inpath <span class="token string">&#39;/root/hivedata/The_NBA_Championship.txt&#39;</span> <span class="token keyword">into</span> <span class="token keyword">table</span> the_nba_championship<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>错误的演示：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> team_name<span class="token punctuation">,</span>explode<span class="token punctuation">(</span>champion_year<span class="token punctuation">)</span> <span class="token keyword">from</span> the_nba_championship<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li>explode函数属于UDTF表生成函数，explode执行返回的结果可以理解为一张虚拟的表，其数据来源于源表；</li><li>在select中只查询源表数据没有问题，只查询explode生成的虚拟表数据也没问题，但是不能在只查询源表的时候，既想返回源表字段又想返回explode生成的虚拟表字段；通俗点讲，有两张表，不能只查询一张表但是又想返回分别属于两张表的字段；</li></ol><p><strong>解决方法：</strong></p><ol><li>从SQL层面上来说上述问题的解决方案是：对两张表进行join关联查询;</li><li>Hive专门提供了语法<code>lateral View</code>侧视图，专门用于搭配explode这样的UDTF函数，以满足上述需要。</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> a<span class="token punctuation">.</span>team_name<span class="token punctuation">,</span>b<span class="token punctuation">.</span><span class="token keyword">year</span>
<span class="token keyword">from</span> the_nba_championship a lateral <span class="token keyword">view</span> explode<span class="token punctuation">(</span>champion_year<span class="token punctuation">)</span> b <span class="token keyword">as</span> <span class="token keyword">year</span>
<span class="token keyword">order</span> <span class="token keyword">by</span> b<span class="token punctuation">.</span><span class="token keyword">year</span> <span class="token keyword">desc</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251624624.png" alt="image-20210906174525863" tabindex="0" loading="lazy"><figcaption>image-20210906174525863</figcaption></figure><h4 id="_3-1-3-hive-lateral-view-侧视图" tabindex="-1"><a class="header-anchor" href="#_3-1-3-hive-lateral-view-侧视图" aria-hidden="true">#</a> 3.1.3 <strong>Hive Lateral View</strong> 侧视图</h4><blockquote><p>Lateral View是一种特殊的语法，主要搭配UDTF类型函数一起使用，用于解决UDTF函数的一些查询限制的问题。</p><p>一般只要使用UDTF，就会固定搭配lateral view使用。</p></blockquote><figure><img src="https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251624059.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>针对explode案例中NBA冠军球队年份排名案例，使用explode函数+lateral view侧视图</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 根据年份倒序排序</span>
<span class="token keyword">select</span> a<span class="token punctuation">.</span>team_name <span class="token punctuation">,</span>b<span class="token punctuation">.</span><span class="token keyword">year</span>
<span class="token keyword">from</span> the_nba_championship a lateral <span class="token keyword">view</span> explode<span class="token punctuation">(</span>champion_year<span class="token punctuation">)</span> b <span class="token keyword">as</span> <span class="token keyword">year</span>
<span class="token keyword">order</span> <span class="token keyword">by</span> b<span class="token punctuation">.</span><span class="token keyword">year</span> <span class="token keyword">desc</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251624882.png" style="zoom:50%;"><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 统计每个球队获取总冠军的次数 并且根据倒序排序</span>
<span class="token keyword">select</span> a<span class="token punctuation">.</span>team_name <span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> nums
<span class="token keyword">from</span> the_nba_championship a lateral <span class="token keyword">view</span> explode<span class="token punctuation">(</span>champion_year<span class="token punctuation">)</span> b <span class="token keyword">as</span> <span class="token keyword">year</span>
<span class="token keyword">group</span> <span class="token keyword">by</span> a<span class="token punctuation">.</span>team_name
<span class="token keyword">order</span> <span class="token keyword">by</span> nums <span class="token keyword">desc</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251624007.png" alt="image-20210906175337680" style="zoom:50%;"><h3 id="_3-2-udaf之聚合函数" tabindex="-1"><a class="header-anchor" href="#_3-2-udaf之聚合函数" aria-hidden="true">#</a> 3.2 UDAF之聚合函数</h3><h4 id="_3-2-1-基础聚合" tabindex="-1"><a class="header-anchor" href="#_3-2-1-基础聚合" aria-hidden="true">#</a> 3.2.1 基础聚合</h4><p>student</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> student
<span class="token punctuation">(</span>
    num  <span class="token keyword">int</span><span class="token punctuation">,</span>
    name string<span class="token punctuation">,</span>
    sex  string<span class="token punctuation">,</span>
    age  <span class="token keyword">int</span><span class="token punctuation">,</span>
    dept string
<span class="token punctuation">)</span>
    <span class="token keyword">row</span> format delimited
        <span class="token keyword">fields</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 加载数据</span>
<span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> inpath <span class="token string">&#39;/root/hivedata/students.txt&#39;</span> <span class="token keyword">into</span> <span class="token keyword">table</span> student<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 场景1：没有group by子句的聚合操作</span>
<span class="token comment">-- count(*)：所有行进行统计，包括NULL行</span>
<span class="token comment">-- count(1)：所有行进行统计，包括NULL行</span>
<span class="token comment">-- count(column)：对column中非Null进行统计</span>
<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cnt1<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cnt2 <span class="token keyword">from</span> student<span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span> <span class="token keyword">as</span> cnt3 <span class="token keyword">from</span> student<span class="token punctuation">;</span>

<span class="token comment">-- 场景2：带有group by子句的聚合操作 注意group by语法限制</span>
<span class="token keyword">select</span> sex<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cnt <span class="token keyword">from</span> student
<span class="token keyword">group</span> <span class="token keyword">by</span> sex<span class="token punctuation">;</span>

<span class="token comment">-- 场景3：select时多个聚合函数一起使用</span>
<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cnt1<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">as</span> cnt2 <span class="token keyword">from</span> student<span class="token punctuation">;</span>

<span class="token comment">-- 场景4：聚合函数和case when条件转换函数、coalesce函数、if函数使用</span>
<span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> sex <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span> <span class="token keyword">THEN</span> <span class="token number">1</span> <span class="token keyword">ELSE</span> <span class="token number">0</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">if</span><span class="token punctuation">(</span>sex <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>

<span class="token comment">-- 场景5：聚合参数不支持嵌套聚合函数</span>
<span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span> <span class="token comment">-- 报错</span>

<span class="token comment">-- 场景6：聚合操作时针对null的处理</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tmp_1<span class="token punctuation">(</span>val1 <span class="token keyword">int</span><span class="token punctuation">,</span> val2 <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">TABLE</span> tmp_1
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 第二行数据(NULL, 2) 在进行sum(val1 + val2)的时候会被忽略</span>
<span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>val1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>val1 <span class="token operator">+</span> val2<span class="token punctuation">)</span> <span class="token keyword">from</span> tmp_1<span class="token punctuation">;</span>

<span class="token comment">-- 可以使用coalesce函数解决（返回第一个不为空的值）</span>
<span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">coalesce</span><span class="token punctuation">(</span>val1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">coalesce</span><span class="token punctuation">(</span>val1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> val2<span class="token punctuation">)</span>
<span class="token keyword">from</span> tmp_1<span class="token punctuation">;</span>

<span class="token comment">-- 场景7：配合distinct关键字去重聚合</span>
<span class="token comment">-- 此场景下，会编译期间会自动设置只启动一个reduce task处理数据  可能造成数据拥堵</span>
<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> sex<span class="token punctuation">)</span> <span class="token keyword">as</span> cnt1 <span class="token keyword">from</span> student<span class="token punctuation">;</span>
<span class="token comment">-- 可以先去重 在聚合 通过子查询完成</span>
<span class="token comment">-- 因为先执行distinct的时候 可以使用多个reducetask来跑数据</span>
<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> gender_uni_cnt
<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> sex <span class="token keyword">from</span> student<span class="token punctuation">)</span> a<span class="token punctuation">;</span>

<span class="token comment">-- 案例需求：找出student中男女学生年龄最大的及其名字</span>
<span class="token comment">-- 这里使用了struct来构造数据 然后针对struct应用max找出最大元素 然后取值</span>
<span class="token keyword">select</span> <span class="token keyword">case</span> sex <span class="token keyword">when</span> <span class="token string">&#39;男&#39;</span> <span class="token keyword">then</span> <span class="token string">&#39;男&#39;</span> <span class="token keyword">when</span> <span class="token string">&#39;女&#39;</span> <span class="token keyword">then</span> <span class="token string">&#39;女&#39;</span> <span class="token keyword">else</span> <span class="token string">&#39;其他&#39;</span> <span class="token keyword">end</span><span class="token punctuation">,</span>
       <span class="token function">max</span><span class="token punctuation">(</span>struct<span class="token punctuation">(</span>age<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>col1 <span class="token keyword">as</span> age<span class="token punctuation">,</span>
       <span class="token function">max</span><span class="token punctuation">(</span>struct<span class="token punctuation">(</span>age<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>col2 <span class="token keyword">as</span> name
<span class="token keyword">from</span> student
<span class="token keyword">where</span> sex <span class="token operator">!=</span> <span class="token string">&#39;\\N&#39;</span>
<span class="token keyword">group</span> <span class="token keyword">by</span> sex
<span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token keyword">desc</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> struct<span class="token punctuation">(</span>age<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span> <span class="token comment">-- {&quot;col1&quot;:20,&quot;col2&quot;:&quot;李勇&quot;}...</span>
<span class="token keyword">select</span> struct<span class="token punctuation">(</span>age<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">.</span>col1 <span class="token keyword">from</span> student<span class="token punctuation">;</span> <span class="token comment">-- 所有年龄</span>

<span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>struct<span class="token punctuation">(</span>age<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span> <span class="token comment">-- 最大年龄</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-2-增强聚合" tabindex="-1"><a class="header-anchor" href="#_3-2-2-增强聚合" aria-hidden="true">#</a> 3.2.2 增强聚合</h4>`,89),l=n("ul",null,[n("li",null,"grouping_sets：一种将多个group by逻辑写在一个sql语句中的便利写法。等价于将不同维度的GROUP BY结果集进行UNION ALL。GROUPING__ID表示结果属于哪一个分组集合。"),n("li",null,[s("cube：根据GROUP BY的维度的所有组合进行聚合。比如cube有a,b,c 3个维度，则所有组合情况是： (a,b,c),(a,b),(b,c),(a,c),(a),(b),(c),()，总个数是"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mi",null,"n")])]),n("annotation",{encoding:"application/x-tex"},"2^n")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6644em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.6644em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight"},"n")])])])])])])])])])])]),n("li",null,"rollup：rollup是cube的子集，以最左侧的维度为主，从该维度进行层级聚合。比如ROLLUP有a,b,c3个维度，则所有组合情况是：(a,b,c),(a,b),(a),()")],-1),i=a(`<p>cookie_info</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> cookie_info
<span class="token punctuation">(</span>
    <span class="token keyword">month</span>    STRING<span class="token punctuation">,</span> <span class="token comment">-- 2018-03</span>
    <span class="token keyword">day</span>      STRING<span class="token punctuation">,</span> <span class="token comment">-- 2018-03-30</span>
    cookieid STRING  <span class="token comment">-- cookie1...</span>
<span class="token punctuation">)</span> <span class="token keyword">ROW</span> FORMAT DELIMITED
    <span class="token keyword">FIELDS</span> <span class="token keyword">TERMINATED</span> <span class="token keyword">BY</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> inpath <span class="token string">&#39;/root/hivedata/cookie_info.txt&#39;</span> <span class="token keyword">into</span> <span class="token keyword">table</span> cookie_info<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251624397.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="grouping-sets" tabindex="-1"><a class="header-anchor" href="#grouping-sets" aria-hidden="true">#</a> grouping_sets</h4><p>对于grouping__id，原则上是通过将group by中的字段倒序排序，然后通过二进制来表示的</p><p>比如说下面的month，day，倒序排序后为（day，month），出现的位置置1</p><p>但是我运行出来的grouping__id与理论上有点出入，具体问题还不知道</p><table><thead><tr><th>字段</th><th>二进制表示</th><th>十进制表示</th></tr></thead><tbody><tr><td>month</td><td>(0, 1)</td><td>1</td></tr><tr><td>day</td><td>(1, 0)</td><td>2</td></tr><tr><td>(month, day)</td><td>(1, 1)</td><td>3</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">month</span><span class="token punctuation">,</span>
       <span class="token keyword">day</span><span class="token punctuation">,</span>
       <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> cookieid<span class="token punctuation">)</span> <span class="token keyword">AS</span> nums<span class="token punctuation">,</span>
       GROUPING__ID
<span class="token keyword">FROM</span> cookie_info
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">month</span><span class="token punctuation">,</span> <span class="token keyword">day</span>
    GROUPING SETS <span class="token punctuation">(</span><span class="token keyword">month</span><span class="token punctuation">,</span> <span class="token keyword">day</span><span class="token punctuation">)</span> <span class="token comment">-- 这里是关键</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> GROUPING__ID<span class="token punctuation">;</span>

<span class="token comment">-- 等价于</span>
<span class="token keyword">select</span> <span class="token keyword">month</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span> <span class="token keyword">as</span> <span class="token keyword">day</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> cookieid<span class="token punctuation">)</span> <span class="token keyword">as</span> nums<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">as</span> grouping__id
<span class="token keyword">from</span> cookie_info <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">month</span>
<span class="token keyword">union</span> <span class="token keyword">all</span>
<span class="token keyword">select</span> <span class="token boolean">NULL</span> <span class="token keyword">as</span> <span class="token keyword">month</span><span class="token punctuation">,</span> <span class="token keyword">day</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> cookieid<span class="token punctuation">)</span> <span class="token keyword">as</span> nums<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token keyword">as</span> grouping__id
<span class="token keyword">from</span> cookie_info <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">day</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251624178.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>对于有(month, day)的情况，如下，grouping__id与理论情况有点出入</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">month</span><span class="token punctuation">,</span> <span class="token keyword">day</span><span class="token punctuation">,</span>
       <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> cookieid<span class="token punctuation">)</span> <span class="token keyword">AS</span> nums<span class="token punctuation">,</span>
       grouping__id
<span class="token keyword">FROM</span> cookie_info
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">month</span><span class="token punctuation">,</span> <span class="token keyword">day</span>
    GROUPING SETS <span class="token punctuation">(</span> <span class="token keyword">month</span><span class="token punctuation">,</span> <span class="token keyword">day</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token keyword">month</span><span class="token punctuation">,</span> <span class="token keyword">day</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">-- 1 month   2 day    3 (month,day)</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> grouping__id<span class="token punctuation">;</span>

<span class="token comment">-- 等价于</span>
<span class="token keyword">SELECT</span> <span class="token keyword">month</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> cookieid<span class="token punctuation">)</span> <span class="token keyword">AS</span> nums<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">AS</span> GROUPING__ID
<span class="token keyword">FROM</span> cookie_info <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">month</span>
<span class="token keyword">UNION</span> <span class="token keyword">ALL</span>
<span class="token keyword">SELECT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token keyword">day</span><span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> cookieid<span class="token punctuation">)</span> <span class="token keyword">AS</span> nums<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token keyword">AS</span> GROUPING__ID
<span class="token keyword">FROM</span> cookie_info <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">day</span>
<span class="token keyword">UNION</span> <span class="token keyword">ALL</span>
<span class="token keyword">SELECT</span> <span class="token keyword">month</span><span class="token punctuation">,</span> <span class="token keyword">day</span><span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> cookieid<span class="token punctuation">)</span> <span class="token keyword">AS</span> nums<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token keyword">AS</span> GROUPING__ID
<span class="token keyword">FROM</span> cookie_info <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">month</span><span class="token punctuation">,</span> <span class="token keyword">day</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251624525.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="cube" tabindex="-1"><a class="header-anchor" href="#cube" aria-hidden="true">#</a> cube</h4><p>cube下，grouping__id依然有出入</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">month</span><span class="token punctuation">,</span>
       <span class="token keyword">day</span><span class="token punctuation">,</span>
       <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> cookieid<span class="token punctuation">)</span> <span class="token keyword">AS</span> nums<span class="token punctuation">,</span>
       GROUPING__ID
<span class="token keyword">FROM</span> cookie_info
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">month</span><span class="token punctuation">,</span> <span class="token keyword">day</span>
<span class="token keyword">WITH</span> CUBE
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> GROUPING__ID<span class="token punctuation">;</span>

<span class="token comment">-- 等价于</span>
<span class="token keyword">SELECT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> cookieid<span class="token punctuation">)</span> <span class="token keyword">AS</span> nums<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">AS</span> GROUPING__ID
<span class="token keyword">FROM</span> cookie_info
<span class="token keyword">UNION</span> <span class="token keyword">ALL</span>
<span class="token keyword">SELECT</span> <span class="token keyword">month</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> cookieid<span class="token punctuation">)</span> <span class="token keyword">AS</span> nums<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">AS</span> GROUPING__ID
<span class="token keyword">FROM</span> cookie_info <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">month</span>
<span class="token keyword">UNION</span> <span class="token keyword">ALL</span>
<span class="token keyword">SELECT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token keyword">day</span><span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> cookieid<span class="token punctuation">)</span> <span class="token keyword">AS</span> nums<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token keyword">AS</span> GROUPING__ID
<span class="token keyword">FROM</span> cookie_info <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">day</span>
<span class="token keyword">UNION</span> <span class="token keyword">ALL</span>
<span class="token keyword">SELECT</span> <span class="token keyword">month</span><span class="token punctuation">,</span> <span class="token keyword">day</span><span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> cookieid<span class="token punctuation">)</span> <span class="token keyword">AS</span> nums<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token keyword">AS</span> GROUPING__ID
<span class="token keyword">FROM</span> cookie_info <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">month</span><span class="token punctuation">,</span> <span class="token keyword">day</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251624807.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="rollup" tabindex="-1"><a class="header-anchor" href="#rollup" aria-hidden="true">#</a> rollup</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 比如，以month维度进行层级聚合：</span>
<span class="token keyword">SELECT</span> <span class="token keyword">month</span><span class="token punctuation">,</span>
       <span class="token keyword">day</span><span class="token punctuation">,</span>
       <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> cookieid<span class="token punctuation">)</span> <span class="token keyword">AS</span> nums<span class="token punctuation">,</span>
       GROUPING__ID
<span class="token keyword">FROM</span> cookie_info
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">month</span><span class="token punctuation">,</span> <span class="token keyword">day</span>
<span class="token keyword">WITH ROLLUP</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> GROUPING__ID<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251624957.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 把month和day调换顺序，则以day维度进行层级聚合：</span>
<span class="token keyword">SELECT</span> <span class="token keyword">day</span><span class="token punctuation">,</span>
       <span class="token keyword">month</span><span class="token punctuation">,</span>
       <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> cookieid<span class="token punctuation">)</span> <span class="token keyword">AS</span> uv<span class="token punctuation">,</span>
       GROUPING__ID
<span class="token keyword">FROM</span> cookie_info
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">day</span><span class="token punctuation">,</span> <span class="token keyword">month</span>
<span class="token keyword">WITH ROLLUP</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> GROUPING__ID<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251624026.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-3-窗口函数" tabindex="-1"><a class="header-anchor" href="#_3-3-窗口函数" aria-hidden="true">#</a> 3.3 窗口函数</h3><blockquote><p><strong>窗口函数</strong>（Window functions）也叫做开窗函数、OLAP函数，其最大特点是：输入值是从SELECT语句的结果集中的一行或多行的“窗口”中获取的。</p><p>如果函数具有<code>OVER</code>子句，则它是窗口函数。</p><p>窗口函数可以简单地解释为类似于聚合函数的计算函数，但是通过GROUP BY子句组合的常规聚合会隐藏正在聚合的各个行，最终输出一行，窗口函数聚合后还可以访问当中的各个行，并且可以将这些行中的某些属性添加到结果集中。</p></blockquote><figure><img src="https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251624372.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_3-3-1-示例" tabindex="-1"><a class="header-anchor" href="#_3-3-1-示例" aria-hidden="true">#</a> 3.3.1 示例</h4><p><strong>表数据：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">--建表加载数据</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> employee
<span class="token punctuation">(</span>
    id     <span class="token keyword">int</span><span class="token punctuation">,</span>
    name   string<span class="token punctuation">,</span>
    deg    string<span class="token punctuation">,</span>
    salary <span class="token keyword">int</span><span class="token punctuation">,</span>
    dept   string
<span class="token punctuation">)</span> <span class="token keyword">row</span> format delimited
    <span class="token keyword">fields</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> inpath <span class="token string">&#39;/root/hivedata/employee.txt&#39;</span> <span class="token keyword">into</span> <span class="token keyword">table</span> employee<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251624597.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>普通聚合：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">----sum+group by普通常规聚合操作------------</span>
<span class="token keyword">select</span> dept<span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">as</span> total <span class="token keyword">from</span> employee
<span class="token keyword">group</span> <span class="token keyword">by</span> dept<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251624346.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>窗口函数聚合：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> deg<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> dept<span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> dept<span class="token punctuation">)</span> <span class="token keyword">as</span> total
<span class="token keyword">from</span> employee<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251625975.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_3-3-2-语法树" tabindex="-1"><a class="header-anchor" href="#_3-3-2-语法树" aria-hidden="true">#</a> 3.3.2 语法树</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">------- 窗口函数语法树 --------</span>
<span class="token keyword">Function</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> argn<span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&gt;</span><span class="token punctuation">]</span>
                               <span class="token punctuation">[</span><span class="token operator">&lt;</span>window_expression<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">-- 其中Function(arg1,..., argn) 可以是下面分类中的任意一个</span>
    <span class="token comment">-- 聚合函数：比如sum max avg等</span>
    <span class="token comment">-- 排序函数：比如rank row_number等</span>
    <span class="token comment">-- 分析函数：比如lead lag first_value等</span>

<span class="token comment">-- OVER [PARTITION BY &lt;...&gt;] 类似于group by 用于指定分组  每个分组你可以把它叫做窗口</span>
<span class="token comment">-- 如果没有PARTITION BY 那么整张表的所有行就是一组</span>

<span class="token comment">-- [ORDER BY &lt;....&gt;]  用于指定每个分组内的数据排序规则 支持ASC、DESC</span>

<span class="token comment">-- [&lt;window_expression&gt;] 窗口表达式，用于指定每个窗口中 操作的数据范围 默认是窗口中所有行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-3-后续数据准备" tabindex="-1"><a class="header-anchor" href="#_3-3-3-后续数据准备" aria-hidden="true">#</a> 3.3.3 后续数据准备</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> website_pv_info
<span class="token punctuation">(</span>
    cookieid   string<span class="token punctuation">,</span> <span class="token comment">-- cookie1 / cookie2</span>
    createtime string<span class="token punctuation">,</span> <span class="token comment">-- 2018-04-14 ...</span>
    pv         <span class="token keyword">int</span> <span class="token comment">-- 2 浏览量</span>
<span class="token punctuation">)</span> <span class="token keyword">row</span> format delimited
    <span class="token keyword">fields</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">create</span> <span class="token keyword">table</span> website_url_info
<span class="token punctuation">(</span>
    cookieid   string<span class="token punctuation">,</span> <span class="token comment">-- cookie1 / cookie2</span>
    createtime string<span class="token punctuation">,</span> <span class="token comment">-- 访问时间 2018-04-10 10:00:02</span>
    url        string  <span class="token comment">-- 访问页面 url1 / url2 ....</span>
<span class="token punctuation">)</span> <span class="token keyword">row</span> format delimited
    <span class="token keyword">fields</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">;</span>


<span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> inpath <span class="token string">&#39;/root/hivedata/website_pv_info.txt&#39;</span> <span class="token keyword">into</span> <span class="token keyword">table</span> website_pv_info<span class="token punctuation">;</span>
<span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> inpath <span class="token string">&#39;/root/hivedata/website_url_info.txt&#39;</span> <span class="token keyword">into</span> <span class="token keyword">table</span> website_url_info<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-4-窗口聚合函数" tabindex="-1"><a class="header-anchor" href="#_3-3-4-窗口聚合函数" aria-hidden="true">#</a> 3.3.4 窗口聚合函数</h4><blockquote><p>所谓窗口聚合函数指的是sum、max、min、avg这样的聚合函数在窗口中的使用</p></blockquote><p>对于sum+窗口函数，总共有四种用法</p><ul><li>sum(...) over( )对表所有行求和</li><li>sum(...) over( order by ... ) 连续累积求和</li><li>sum(...) over( partition by... ) 同组内所行求和</li><li>sum(...) over( partition by... order by ... ) 在每个分组内，连续累积求和</li></ul><p>需求：求出每个用户的pv数</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> cookieid<span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>pv<span class="token punctuation">)</span> <span class="token keyword">as</span> total_pv <span class="token keyword">from</span> website_pv_info
<span class="token keyword">group</span> <span class="token keyword">by</span> cookieid<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251625687.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>需求：求出网站总的pv数 所有用户所有访问加起来</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> cookieid<span class="token punctuation">,</span>
       createtime<span class="token punctuation">,</span>
       pv<span class="token punctuation">,</span>
       <span class="token function">sum</span><span class="token punctuation">(</span>pv<span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> total_pv <span class="token comment">-- 所有行求和</span>
<span class="token keyword">from</span> website_pv_info<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需求：求出每个用户总pv数</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> cookieid<span class="token punctuation">,</span>
       createtime<span class="token punctuation">,</span>
       pv<span class="token punctuation">,</span>
       <span class="token function">sum</span><span class="token punctuation">(</span>pv<span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> cookieid<span class="token punctuation">)</span> <span class="token keyword">as</span> total_pv <span class="token comment">-- 同一组所有行求和</span>
<span class="token keyword">from</span> website_pv_info<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需求：求出每个用户截止到当天，累计的总pv</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> cookieid<span class="token punctuation">,</span>
       createtime<span class="token punctuation">,</span>
       pv<span class="token punctuation">,</span>
       <span class="token comment">-- 同一组内累计求和</span>
       <span class="token function">sum</span><span class="token punctuation">(</span>pv<span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> cookieid <span class="token keyword">order</span> <span class="token keyword">by</span> createtime<span class="token punctuation">)</span> <span class="token keyword">as</span> current_total_pv
<span class="token keyword">from</span> website_pv_info<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251625214.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_3-3-5-窗口表达式" tabindex="-1"><a class="header-anchor" href="#_3-3-5-窗口表达式" aria-hidden="true">#</a> 3.3.5 窗口表达式</h4><blockquote><p>在sum(...) over( partition by... order by ... )语法完整的情况下，进行累积聚合操作，默认累积聚合行为是：从第一行聚合到当前行。</p><p>Window expression窗口表达式给我们提供了一种<strong>控制行范围的能力</strong>，比如向前2行，向后3行。</p><p><strong>其实就是前缀和</strong></p></blockquote><p>关键字：<code>row between</code></p><ul><li>preceding：往前</li><li>following：往后</li><li>current row：当前行</li><li>unbounded：边界</li><li>unbounded preceding 表示从前面的起点</li><li>unbounded following：表示到后面的终点</li></ul><p>需求：第一行到当前行，写不写都一样</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> cookieid<span class="token punctuation">,</span>
       createtime<span class="token punctuation">,</span>
       pv<span class="token punctuation">,</span>
       <span class="token function">sum</span><span class="token punctuation">(</span>pv<span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> cookieid <span class="token keyword">order</span> <span class="token keyword">by</span> createtime <span class="token keyword">rows</span> <span class="token operator">between</span> <span class="token keyword">unbounded</span> <span class="token keyword">preceding</span> <span class="token operator">and</span> <span class="token keyword">current</span> <span class="token keyword">row</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pv2
<span class="token keyword">from</span> website_pv_info<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需求：向前三行至当前行</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> cookieid<span class="token punctuation">,</span>
       createtime<span class="token punctuation">,</span>
       pv<span class="token punctuation">,</span>
       <span class="token function">sum</span><span class="token punctuation">(</span>pv<span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> cookieid <span class="token keyword">order</span> <span class="token keyword">by</span> createtime <span class="token keyword">rows</span> <span class="token operator">between</span> <span class="token number">3</span> <span class="token keyword">preceding</span> <span class="token operator">and</span> <span class="token keyword">current</span> <span class="token keyword">row</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pv4
<span class="token keyword">from</span> website_pv_info<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251625862.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,62),u=n("h4",{id:"_3-3-6-窗口排序函数-topn",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-3-6-窗口排序函数-topn","aria-hidden":"true"},"#"),s(" 3.3.6 窗口排序函数（TOPN / "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mfrac",null,[n("mi",null,"n"),n("mi",null,"m")])]),n("annotation",{encoding:"application/x-tex"},"\\frac{n}{m}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0404em","vertical-align":"-0.345em"}}),n("span",{class:"mord"},[n("span",{class:"mopen nulldelimiter"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.6954em"}},[n("span",{style:{top:"-2.655em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"m")])])]),n("span",{style:{top:"-3.23em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),n("span",{style:{top:"-3.394em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"n")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.345em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter"})])])])]),s("）")],-1),d=a(`<h4 id="row-number家族-topn" tabindex="-1"><a class="header-anchor" href="#row-number家族-topn" aria-hidden="true">#</a> row_number家族(TOPN)</h4><ul><li><strong>row_number</strong>：在每个分组中，为每行分配一个从1开始的唯一序列号，递增，不考虑重复；(1,2,3,4,5,6,7)</li><li><strong>rank</strong>: 在每个分组中，为每行分配一个从1开始的序列号，考虑重复，挤占后续位置；(1,2,3,3,5,6,7)</li><li><strong>dense_rank</strong>: 在每个分组中，为每行分配一个从1开始的序列号，考虑重复，不挤占后续位置；(1,2,3,3,4,5,6)</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cookieid<span class="token punctuation">,</span>
       createtime<span class="token punctuation">,</span>
       pv<span class="token punctuation">,</span>
       RANK<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> cookieid <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> pv <span class="token keyword">desc</span><span class="token punctuation">)</span>       <span class="token keyword">AS</span> rn1<span class="token punctuation">,</span>
       DENSE_RANK<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> cookieid <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> pv <span class="token keyword">desc</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> rn2<span class="token punctuation">,</span>
       ROW_NUMBER<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> cookieid <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> pv <span class="token keyword">DESC</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> rn3
<span class="token keyword">FROM</span> website_pv_info
<span class="token keyword">WHERE</span> cookieid <span class="token operator">=</span> <span class="token string">&#39;cookie1&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251625053.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>需求：找出每个用户访问pv的最多的Top3，重复并列的不考虑</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> cookieid<span class="token punctuation">,</span>
             createtime<span class="token punctuation">,</span>
             pv<span class="token punctuation">,</span>
             ROW_NUMBER<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> cookieid <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> pv <span class="token keyword">DESC</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> seq
      <span class="token keyword">FROM</span> website_pv_info<span class="token punctuation">)</span> <span class="token keyword">as</span> tmp
<span class="token keyword">where</span> tmp<span class="token punctuation">.</span>seq <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251625834.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="ntile-frac-n-m" tabindex="-1"><a class="header-anchor" href="#ntile-frac-n-m" aria-hidden="true">#</a> ntile($ \\frac{n}{m}$)</h4><blockquote><p><strong>将每个分组内的数据分为指定的若干个桶里</strong>（分为若干个部分），并且为每一个桶分配一个桶编号。</p><p>如果不能平均分配，则优先分配较小编号的桶，并且各个桶中能放的行数最多相差1。</p><p>有时会有这样的需求:如果数据排序后分为三部分，业务人员只关心其中的一部分，如何将这中间的三分之一数据拿出来呢?NTILE函数即可以满足。</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 把每个分组内的数据分为3桶</span>
<span class="token keyword">SELECT</span> cookieid<span class="token punctuation">,</span>
       createtime<span class="token punctuation">,</span>
       pv<span class="token punctuation">,</span>
       NTILE<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> cookieid <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> createtime<span class="token punctuation">)</span> <span class="token keyword">AS</span> rn2
<span class="token keyword">FROM</span> website_pv_info
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> cookieid<span class="token punctuation">,</span> createtime<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251625813.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>需求：统计每个用户pv最多的前1/3天</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 理解：将数据根据cookieid分 根据pv倒序排序 排序之后分为3个部分 取第一部分</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> cookieid<span class="token punctuation">,</span>
             createtime<span class="token punctuation">,</span>
             pv<span class="token punctuation">,</span>
             NTILE<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> cookieid <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> pv <span class="token keyword">DESC</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> rn
      <span class="token keyword">FROM</span> website_pv_info<span class="token punctuation">)</span> tmp
<span class="token keyword">where</span> rn <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251625429.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_3-3-7-窗口分析函数" tabindex="-1"><a class="header-anchor" href="#_3-3-7-窗口分析函数" aria-hidden="true">#</a> 3.3.7 窗口分析函数</h4><ul><li><strong>LAG</strong>(col,n,DEFAULT) 用于统计窗口内往上第n行值。第一个参数为列名，第二个参数为往上第n行（可选，默认为1），第三个参数为默认值（当往上第n行为NULL时候，取默认值，如不指定，则为NULL）；</li><li><strong>LEAD</strong>(col,n,DEFAULT) 用于统计窗口内往下第n行值。第一个参数为列名，第二个参数为往下第n行（可选，默认为1），第三个参数为默认值（当往下第n行为NULL时候，取默认值，如不指定，则为NULL）；</li><li><strong>FIRST_VALUE</strong> 取分组内排序后，截止到当前行，第一个值</li><li><strong>LAST_VALUE</strong> 取分组内排序后，截止到当前行，最后一个值</li></ul><p>LAG</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- LAG</span>
<span class="token keyword">SELECT</span> cookieid<span class="token punctuation">,</span>
       createtime<span class="token punctuation">,</span>
       url<span class="token punctuation">,</span>
       ROW_NUMBER<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> cookieid <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> createtime<span class="token punctuation">)</span>                              <span class="token keyword">AS</span> rn<span class="token punctuation">,</span>
       LAG<span class="token punctuation">(</span>createtime<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;1970-01-01 00:00:00&#39;</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> cookieid <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> createtime<span class="token punctuation">)</span> <span class="token keyword">AS</span> last_1_time<span class="token punctuation">,</span>
       LAG<span class="token punctuation">(</span>createtime<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> cookieid <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> createtime<span class="token punctuation">)</span>                        <span class="token keyword">AS</span> last_2_time
<span class="token keyword">FROM</span> website_url_info<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251625500.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>LEAD</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- LEAD</span>
<span class="token keyword">SELECT</span> cookieid<span class="token punctuation">,</span>
       createtime<span class="token punctuation">,</span>
       url<span class="token punctuation">,</span>
       ROW_NUMBER<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> cookieid <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> createtime<span class="token punctuation">)</span>                               <span class="token keyword">AS</span> rn<span class="token punctuation">,</span>
       LEAD<span class="token punctuation">(</span>createtime<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;1970-01-01 00:00:00&#39;</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> cookieid <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> createtime<span class="token punctuation">)</span> <span class="token keyword">AS</span> next_1_time<span class="token punctuation">,</span>
       LEAD<span class="token punctuation">(</span>createtime<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> cookieid <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> createtime<span class="token punctuation">)</span>                        <span class="token keyword">AS</span> next_2_time
<span class="token keyword">FROM</span> website_url_info<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251625815.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>FIRST_VALUE</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- FIRST_VALUE</span>
<span class="token keyword">SELECT</span> cookieid<span class="token punctuation">,</span>
       createtime<span class="token punctuation">,</span>
       url<span class="token punctuation">,</span>
       ROW_NUMBER<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> cookieid <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> createtime<span class="token punctuation">)</span>     <span class="token keyword">AS</span> rn<span class="token punctuation">,</span>
       FIRST_VALUE<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> cookieid <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> createtime<span class="token punctuation">)</span> <span class="token keyword">AS</span> first1
<span class="token keyword">FROM</span> website_url_info<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251625077.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>LAST_VALUE，到当前最后一个值其实就是自己</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- LAST_VALUE</span>
<span class="token keyword">SELECT</span> cookieid<span class="token punctuation">,</span>
       createtime<span class="token punctuation">,</span>
       url<span class="token punctuation">,</span>
       ROW_NUMBER<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> cookieid <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> createtime<span class="token punctuation">)</span>    <span class="token keyword">AS</span> rn<span class="token punctuation">,</span>
       LAST_VALUE<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> cookieid <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> createtime<span class="token punctuation">)</span> <span class="token keyword">AS</span> last1
<span class="token keyword">FROM</span> website_url_info<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://vingkin-1304361015.cos.ap-shanghai.myqcloud.com/img/202309251625051.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-4-抽样函数" tabindex="-1"><a class="header-anchor" href="#_3-4-抽样函数" aria-hidden="true">#</a> 3.4 抽样函数</h3><h4 id="_3-4-1-随机抽样" tabindex="-1"><a class="header-anchor" href="#_3-4-1-随机抽样" aria-hidden="true">#</a> 3.4.1 随机抽样</h4><p>需求：随机抽取2个学生的情况进行查看</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student
DISTRIBUTE <span class="token keyword">BY</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span> SORT <span class="token keyword">BY</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">LIMIT</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token comment">-- 使用order by+rand也可以实现同样的效果 但是效率不高</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">LIMIT</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-4-2-基于数据块抽样" tabindex="-1"><a class="header-anchor" href="#_3-4-2-基于数据块抽样" aria-hidden="true">#</a> 3.4.2 基于数据块抽样</h4><blockquote><p>意思就是随机一个数据块进行抽样，当只有一个数据块时，每次结果都一样</p></blockquote><ul><li>Block块采样允许随机获取n行数据、百分比数据或指定大小的数据。</li><li>采样粒度是HDFS块大小</li><li>优点是速度快，缺点是不随机</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 根据行数抽样（获得随机数据块的第一行数据）</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student TABLESAMPLE <span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">ROWS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 根据数据大小百分比抽样（获得随机数据块的前50%数据）</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student TABLESAMPLE <span class="token punctuation">(</span><span class="token number">50</span> <span class="token keyword">PERCENT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 根据数据大小抽样（获得随机数据块的前1K数据）</span>
<span class="token comment">-- 支持数据单位 b/B, k/K, m/M, g/G</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student TABLESAMPLE <span class="token punctuation">(</span><span class="token number">1</span>K<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-4-3-基于分桶表抽样" tabindex="-1"><a class="header-anchor" href="#_3-4-3-基于分桶表抽样" aria-hidden="true">#</a> 3.4.3 基于分桶表抽样</h4><blockquote><p>这是一种特殊的采样方法，针对分桶表进行了优化。优点是既随机速度也很快。</p></blockquote><p>语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>TABLESAMPLE <span class="token punctuation">(</span>BUCKET x <span class="token keyword">OUT</span> <span class="token keyword">OF</span> y <span class="token punctuation">[</span><span class="token keyword">ON</span> colname<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">-- 1、y必须是table总bucket数的倍数或者因子。hive根据y的大小，决定抽样的比例。</span>
<span class="token comment">-- 例如，table总共分了4份（4个bucket），当y=2时，抽取(4/2=)2个bucket的数据，当y=8时，抽取(4/8=)1/2个bucket的数据。</span>
<span class="token comment">-- 2、x表示从哪个bucket开始抽取。</span>
<span class="token comment">-- 例如，table总bucket数为4，tablesample(bucket 4 out of 4)，表示总共抽取（4/4=）1个bucket的数据，抽取第4个bucket的数据。</span>
<span class="token comment">-- 注意：x的值必须小于等于y的值，否则FAILED:Numerator should not be bigger than denominator in sample clause for table stu_buck</span>
<span class="token comment">-- 3、ON colname表示基于什么抽</span>
<span class="token comment">-- ON rand()表示随机抽</span>
<span class="token comment">-- ON 分桶字段 表示基于分桶字段抽样 效率更高 推荐</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 根据整行数据进行抽样</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> t_usa_covid19_bucket TABLESAMPLE <span class="token punctuation">(</span>BUCKET <span class="token number">1</span> <span class="token keyword">OUT</span> <span class="token keyword">OF</span> <span class="token number">5</span> <span class="token keyword">ON</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 根据分桶字段进行抽样 效率更高（对于该案例就是抽取第一桶的数据）</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> t_usa_covid19_bucket TABLESAMPLE <span class="token punctuation">(</span>BUCKET <span class="token number">1</span> <span class="token keyword">OUT</span> <span class="token keyword">OF</span> <span class="token number">5</span> <span class="token keyword">ON</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,42),k=[c,l,i,u,d];function r(m,v){return t(),p("div",null,k)}const y=e(o,[["render",r],["__file","4.html.vue"]]);export{y as default};
