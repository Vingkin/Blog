const n=JSON.parse('{"key":"v-62f7a19f","path":"/bigdata/hadoop/mapreduce/3.html","title":"MapReduce 高阶编程","lang":"zh-CN","frontmatter":{"title":"MapReduce 高阶编程","description":"1. MapReduce Counter计数器 1.1 自定义Counter计数器 需求：在WordCount程序中对apple单词的数量利用计数器进行统计 在map阶段自定义一个counter，并且在遍历的时候进行统计 protected void map(LongWritable key, Text value, Mapper&lt;LongWritable, Text, Text, LongWritable&gt;.Context context) throws IOException, InterruptedException { // todo 从程序的上下文环境中获取全局计数器 指定计数器所属组的名字 计数器的名字 Counter counter = context.getCounter(\\"vingkin counters\\", \\"apple counter\\"); // 拿取一行数据转换为String String line = value.toString(); // 根据分隔符进行切割 String[] words = line.split(\\"\\\\\\\\s+\\"); // 遍历数组 for (String word : words) { // 计数器使用 if (\\"apple\\".equals(word)) { counter.increment(1); } outkey.set(word); // 输出数据 吧每个单词都标记1 输出的结果&lt;单词,1&gt; context.write(outkey, outvalue); } }","head":[["meta",{"property":"og:url","content":"https://vingkin.github.io/Blog/Blog/bigdata/hadoop/mapreduce/3.html"}],["meta",{"property":"og:site_name","content":"Vingkin的学习博客"}],["meta",{"property":"og:title","content":"MapReduce 高阶编程"}],["meta",{"property":"og:description","content":"1. MapReduce Counter计数器 1.1 自定义Counter计数器 需求：在WordCount程序中对apple单词的数量利用计数器进行统计 在map阶段自定义一个counter，并且在遍历的时候进行统计 protected void map(LongWritable key, Text value, Mapper&lt;LongWritable, Text, Text, LongWritable&gt;.Context context) throws IOException, InterruptedException { // todo 从程序的上下文环境中获取全局计数器 指定计数器所属组的名字 计数器的名字 Counter counter = context.getCounter(\\"vingkin counters\\", \\"apple counter\\"); // 拿取一行数据转换为String String line = value.toString(); // 根据分隔符进行切割 String[] words = line.split(\\"\\\\\\\\s+\\"); // 遍历数组 for (String word : words) { // 计数器使用 if (\\"apple\\".equals(word)) { counter.increment(1); } outkey.set(word); // 输出数据 吧每个单词都标记1 输出的结果&lt;单词,1&gt; context.write(outkey, outvalue); } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-25T11:35:18.000Z"}],["meta",{"property":"article:author","content":"Vingkin"}],["meta",{"property":"article:modified_time","content":"2023-09-25T11:35:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MapReduce 高阶编程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-25T11:35:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Vingkin\\"}]}"]]},"headers":[{"level":2,"title":"1. MapReduce Counter计数器","slug":"_1-mapreduce-counter计数器","link":"#_1-mapreduce-counter计数器","children":[{"level":3,"title":"1.1 自定义Counter计数器","slug":"_1-1-自定义counter计数器","link":"#_1-1-自定义counter计数器","children":[]}]},{"level":2,"title":"2. MapReduce读取数据库操作","slug":"_2-mapreduce读取数据库操作","link":"#_2-mapreduce读取数据库操作","children":[{"level":3,"title":"2.1 MapReduce读取Mysql操作","slug":"_2-1-mapreduce读取mysql操作","link":"#_2-1-mapreduce读取mysql操作","children":[]},{"level":3,"title":"2.2 MapReducer写入Mysql操作","slug":"_2-2-mapreducer写入mysql操作","link":"#_2-2-mapreducer写入mysql操作","children":[]}]},{"level":2,"title":"3. MapReduce Join操作","slug":"_3-mapreduce-join操作","link":"#_3-mapreduce-join操作","children":[{"level":3,"title":"3.1 Reduce Side Join","slug":"_3-1-reduce-side-join","link":"#_3-1-reduce-side-join","children":[]},{"level":3,"title":"3.2 MapReduce分布式缓存","slug":"_3-2-mapreduce分布式缓存","link":"#_3-2-mapreduce分布式缓存","children":[]},{"level":3,"title":"3.3 Map Side Join","slug":"_3-3-map-side-join","link":"#_3-3-map-side-join","children":[]}]},{"level":2,"title":"4. MapReduce 工作流","slug":"_4-mapreduce-工作流","link":"#_4-mapreduce-工作流","children":[]}],"git":{"createdTime":1695641718000,"updatedTime":1695641718000,"contributors":[{"name":"Vingkin","email":"1830053226@qq.com","commits":1}]},"readingTime":{"minutes":14.36,"words":4307},"filePathRelative":"bigdata/hadoop/mapreduce/3.md","localizedDate":"2023年9月25日","excerpt":"<h2> 1. MapReduce Counter计数器</h2>\\n<h3> 1.1 自定义Counter计数器</h3>\\n<blockquote>\\n<p>需求：在WordCount程序中对apple单词的数量利用计数器进行统计</p>\\n</blockquote>\\n<p>在map阶段自定义一个counter，并且在遍历的时候进行统计</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">protected</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">map</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">LongWritable</span> key<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Text</span> value<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Mapper</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">LongWritable</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Text</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Text</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">LongWritable</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">.</span>Context context<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">IOException</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">InterruptedException</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token comment\\">// todo 从程序的上下文环境中获取全局计数器 指定计数器所属组的名字 计数器的名字</span>\\n    <span class=\\"token class-name\\">Counter</span> counter <span class=\\"token operator\\">=</span> context<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getCounter</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"vingkin counters\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"apple counter\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 拿取一行数据转换为String</span>\\n    <span class=\\"token class-name\\">String</span> line <span class=\\"token operator\\">=</span> value<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 根据分隔符进行切割</span>\\n    <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> words <span class=\\"token operator\\">=</span> line<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">split</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"\\\\\\\\s+\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 遍历数组</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> word <span class=\\"token operator\\">:</span> words<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\n        <span class=\\"token comment\\">// 计数器使用</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"apple\\"</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">equals</span><span class=\\"token punctuation\\">(</span>word<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            counter<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">increment</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        outkey<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>word<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 输出数据 吧每个单词都标记1 输出的结果&lt;单词,1&gt;</span>\\n        context<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">write</span><span class=\\"token punctuation\\">(</span>outkey<span class=\\"token punctuation\\">,</span> outvalue<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"Vingkin"},"autoDesc":true}');export{n as data};
